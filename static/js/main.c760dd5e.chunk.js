(this.webpackJsonpteminologies=this.webpackJsonpteminologies||[]).push([[0],{28:function(e,t,a){},29:function(e,t,a){"use strict";a.r(t);var r=a(1),i=a.n(r),n=a(18),o=a.n(n),s=a(0),c=Object(r.createContext)(null),l=function(e){var t=e.children;return Object(s.jsx)(c.Provider,{value:{},children:t})},h=a(3),d=a(2),p=function(e){var t=e.children;return Object(s.jsx)(s.Fragment,{children:t})},u=a(9),m=a(8),g=a(10),b=a(7),f=a(30),j=a(16),y=function(e,t,a){for(var r=Math.ceil(t/15),i=function(t){0===t&&e.push.apply(e,Object(j.a)(a.slice(0,15).map((function(e){return e})))),0!==t&&e.push.apply(e,Object(j.a)(a.slice(15*t,15*t+15).map((function(e){return e.path+="/p"+(t+1),e}))))},n=0;n<r;n++)i(n);return e},x=function(e){var t=e.sort((function(e,t){var a=e.title.toUpperCase(),r=t.title.toUpperCase();return a<r?-1:a>r?1:0})),a=t.findIndex((function(e){return!0===e.isLargerTitle}));if(-1!==a){var r=t.splice(a,1),i=Object(m.a)(r,1)[0];t.unshift(i)}var n=t.findIndex((function(e){return"Summary"===e.title}));if(-1!==n){var o=t.splice(n,1),s=Object(m.a)(o,1)[0];t.push(s)}return t},w="https://developer.mozilla.org/en-US/docs/Web",O=[{id:Object(f.a)(),title:"HTTP",isLargerTitle:!0,path:"/http",url:"".concat(w,"/HTTP"),text:{p1:Object(s.jsxs)("p",{children:["HTTP is a protocol for fetching resources such as HTML documents. It is the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser. A complete document is"," ",Object(s.jsx)("b",{children:"RECONSTRUCTED"})," from the different sub-documents fetched, for instance, text, layout description, images, videos, scripts, and more."]})}},{id:Object(f.a)(),title:"requests",isLargerTitle:!1,path:"/http",anchor:"requests",text:{p1:Object(s.jsx)("p",{children:"The messages sent by the client, usually a web browser, called requests."})}},{id:Object(f.a)(),title:"responses",isLargerTitle:!1,path:"/http",anchor:"response",text:{p1:Object(s.jsx)("p",{children:"The messages sent by the server as an answer, called responses."})}},{id:Object(f.a)(),title:"Client: the user-agent",isLargerTitle:!1,path:"/http",anchor:"the_user_agent",text:{p1:Object(s.jsxs)("p",{children:["The ",Object(s.jsx)("i",{children:"user-agent"})," is any tool that acts on behalf of the user, such as web browser to initiate the request, never the server."]})}},{id:Object(f.a)(),title:"HTTP Messages",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Messages"),anchor:"http_messages",text:{p1:Object(s.jsx)("p",{children:"HTTP messages are how data is exchanged between a server and a client. There are two types of messages: requests sent by the client to trigger an action on the server, and responses, the answer from the server."})}},{id:Object(f.a)(),title:"http session",isLargerTitle:!1,path:"/http",anchor:"http_session",text:{p1:Object(s.jsx)("p",{children:"In client-server protocols, it is the client which establishes the connection. Opening a connection in HTTP means initiating a connection in the underlying transport layer, usually this is TCP."})}},{id:Object(f.a)(),title:"Connection management in HTTP/1.x",isLargerTitle:!1,path:"/http",anchor:"connection_management",text:{p1:Object(s.jsxs)("p",{children:["Connection management is a key topic in HTTP: opening and maintaining connections largely impacts the performance of Web sites and Web applications. In HTTP/1.x, there are several models:"," ",Object(s.jsx)("i",{children:"short-lived connections"}),", ",Object(s.jsx)("i",{children:"persistent connections"}),", and"," ",Object(s.jsx)("i",{children:"HTTP pipelining"}),"."]})}},{id:Object(f.a)(),title:"short-lived",isLargerTitle:!1,path:"/http",anchor:"short_lived",text:{p1:Object(s.jsx)("p",{children:"A new one created each time a request needed sending, and closed once the answer had been received."})}},{id:Object(f.a)(),title:"persistent-connection",isLargerTitle:!1,path:"/http",anchor:"persistent_connection",text:{p1:Object(s.jsx)("p",{children:"The persistent-connection model keeps connections opened between successive requests, reducing the time needed to open new connections."})}},{id:Object(f.a)(),title:"HTTP pipelining model",isLargerTitle:!1,path:"/http",anchor:"http_pipelining_model",text:{p1:Object(s.jsx)("p",{children:"The HTTP pipelining model goes one step further, by sending several successive requests without even waiting for an answer, reducing much of the latency in the network."})}},{id:Object(f.a)(),title:"Content Security Policy (CSP)",isLargerTitle:!1,path:"/http",anchor:"csp",text:{p1:Object(s.jsx)("p",{children:"Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft, to site defacement, to malware distribution. Cross-site scripting (XSS) is a security exploit which allows an attacker to inject into a website malicious client-side code. This code is executed by the victims and lets the attackers bypass access controls and impersonate users. According to the Open Web Application Security Project, XSS was the seventh most common Web app vulnerability."})}},{id:Object(f.a)(),title:"HTTP cookies",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Cookies"),anchor:"httpcookies",text:{p1:Object(s.jsx)("p",{children:"An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser. The browser may store the cookie and send it back to the same server with later requests. Typically, an HTTP cookie is used to tell if two requests come from the same browser\u2014keeping a user logged in, for example. It remembers stateful information for the stateless HTTP protocol."})}},{id:Object(f.a)(),title:"Same-origin policy",isLargerTitle:!1,path:"/http",url:"".concat(w,"/Security/Same-origin_policy"),anchor:"same-origin-policy",text:{p1:Object(s.jsx)("p",{children:"The same-origin policy is a critical security mechanism that restricts how a document or script loaded by one origin can interact with a resource from another origin."})}},{id:Object(f.a)(),title:"HTTP caching",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Caching"),anchor:"HTTP_caching",text:{p1:Object(s.jsx)("p",{children:"The performance of web sites and applications can be significantly improved by reusing previously fetched resources. Web caches reduce latency and network traffic and thus lessen the time needed to display resource representations. HTTP caching makes Web sites more responsive. For a web site, web caching is a major component in achieving high performance. However, the cache functionality must be configured properly, as not all resources stay identical forever: it's important to cache a resource only until it changes, not longer."})}},{id:Object(f.a)(),title:"Types of caches",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Caching#types_of_caches"),anchor:"Types_of_caches",text:{p1:Object(s.jsx)("p",{children:"There are several types of caches. These can be grouped into two main categories: shared and private caches. A shared cache is a cache that stores responses for reuse by more than one user. A private cache is dedicated to a single user."})}},{id:Object(f.a)(),title:"Private browser caches",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Caching"),anchor:"Private_browser_caches",text:{p1:Object(s.jsx)("p",{children:'A private cache is dedicated to a single user. You may have seen "caching" in your browser\'s settings already. A browser cache holds all documents the user downloads via HTTP. This cache is used to make visited documents available for back/forward navigation, saving, viewing-as-source, etc. without requiring an additional trip to the server. It also improves offline browsing of cached content.'})}},{id:Object(f.a)(),title:"Shared proxy caches",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Caching"),anchor:"Shared_proxy_caches",text:{p1:Object(s.jsx)("p",{children:"A shared cache is a cache that stores responses to be reused by more than one user. For example, an Internet Service Provider (ISP) or your company might have set up a web proxy as part of its local network infrastructure to serve many users so that popular resources are reused a number of times, reducing network traffic and latency."})}},{id:Object(f.a)(),title:"Cache Eviction",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Caching#freshness"),anchor:"cache_eviction",text:{p1:Object(s.jsx)("p",{children:"Once a resource is stored in a cache, it could theoretically be served by the cache forever. Caches have finite storage space so items are periodically removed from storage. This process is called cache eviction. Also, some resources may change on the server so the cache should be updated when this happens."})}},{id:Object(f.a)(),title:"Cross-Origin Resource Sharing (CORS)",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/CORS"),anchor:"CORS",text:{p1:Object(s.jsx)("p",{children:'Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.'})}},{id:Object(f.a)(),title:"4 Building Blocks Of World Wide Web",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/Basics_of_HTTP/Evolution_of_HTTP"),anchor:"world_wide_web",text:{p1:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:"A textual format to represent hypertext documents, the HyperText Markup Language (HTML)."}),Object(s.jsx)("li",{children:"A simple protocol to exchange these documents, the HyperText Transfer Protocol (HTTP)."}),Object(s.jsx)("li",{children:"A client to display (and edit) these documents, the first web browser called the WorldWideWeb."}),Object(s.jsx)("li",{children:"A server to give access to the document, an early version of httpd."})]})}},{id:Object(f.a)(),title:"Cross-Origin Resource Sharing (CORS)",isLargerTitle:!1,path:"/http",url:"".concat(w,"/HTTP/CORS"),anchor:"CORS",text:{p1:Object(s.jsx)("p",{children:'Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.'})}},{id:Object(f.a)(),title:"TCP",isLargerTitle:!1,path:"/http",url:"https://developer.mozilla.org/en-US/docs/Glossary/TCP",anchor:"TCP",text:{p1:Object(s.jsx)("p",{children:"TCP (Transmission Control Protocol) is an important network protocol that lets two hosts connect and exchange data streams. TCP guarantees the delivery of data and packets in the same order as they were sent."})}},{id:Object(f.a)(),title:"Protocol",isLargerTitle:!1,path:"/http",url:"https://developer.mozilla.org/en-US/docs/Glossary/Protocol",anchor:"Protocol",text:{p1:Object(s.jsx)("p",{children:"A protocol is a system of rules that define how data is exchanged within or between computers. Communications between devices require that the devices agree on the format of the data that is being exchanged. The set of rules that defines a format is called a protocol."})}},{id:Object(f.a)(),title:"Transport Layer Security (TLS)",isLargerTitle:!1,path:"/http",url:"https://developer.mozilla.org/en-US/docs/Glossary/TLS",anchor:"TLS",text:{p1:Object(s.jsx)("p",{children:"Transport Layer Security (TLS), formerly known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols. Both SSL and TLS are client / server protocols that ensure communication privacy by using cryptographic protocols to provide security over a network. When a server and client communicate using TLS, it ensures that no third party can eavesdrop or tamper with any message."})}},{id:Object(f.a)(),title:"Secure Sockets Layer (SSL)",isLargerTitle:!1,path:"/http",url:"https://developer.mozilla.org/en-US/docs/Glossary/SSL",anchor:"SSL",text:{p1:Object(s.jsx)("p",{children:"Secure Sockets Layer, or SSL, was the old standard security technology for creating an encrypted network link between a server and client, ensuring all data passed is private and secure."})}}];x(O);var v=O.length,T=(y([],v,O),"https://reactjs.org/docs"),k="https://beta.reactjs.org/learn",L=[{id:Object(f.a)(),title:"React",isLargerTitle:!0,path:"/react",url:"".concat(k),anchor:"react",text:{p1:Object(s.jsx)("p",{children:"A JavaScript library for building user interfaces. React stands at the intersection of design and programming. It lets you take a complex user interface, and break it down into nestable and reusable pieces called \u201ccomponents\u201d that fit well together."})}},{id:Object(f.a)(),title:"Thinking in React",isLargerTitle:!1,path:"/react",url:"".concat(k,"/thinking-in-react"),anchor:"thinking_in_react",text:{p1:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:"Step 1: Break the UI into a component hierarchy."}),Object(s.jsx)("li",{children:"Step 2: Build a static version in React."}),Object(s.jsx)("li",{children:"Step 3: Find the minimal but complete representation of UI state."}),Object(s.jsx)("li",{children:"Step 4: Identify where your state should live."}),Object(s.jsx)("li",{children:"Step 5: Add inverse data flow."})]})}},{id:Object(f.a)(),title:"Components: UI building blocks",isLargerTitle:!1,path:"/react",url:"".concat(k,"/your-first-component"),anchor:"components",text:{p1:Object(s.jsx)("p",{children:"A React component is a JavaScript function that you can sprinkle with markup(html-like tag in React component called JSX). React lets you combine your markup, CSS, and JavaScript into custom \u201ccomponents,\u201d reusable UI elements for your app: their names always begin with a capital letter, they return JSX markup. Just like with HTML tags, you can compose, order and nest components to design whole pages. You can define a component once, and then use it in as many places and as many times as you like. In a React app, every piece of UI is a component."})}},{id:Object(f.a)(),title:"JSX",isLargerTitle:!1,path:"/react",url:"".concat(k,"/writing-markup-with-jsx"),anchor:"jsx",text:{p1:Object(s.jsx)("p",{children:"JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. As the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why in React, rendering logic and markup live together in the same place\u2014components! Keeping a component's(such as button) rendering logic and markup together ensures that they stay in sync with each other on every edit. JSX is very minimal as a templating language because it lets you organize data and logic using JavaScript."})}},{id:Object(f.a)(),title:"Curly Braces",isLargerTitle:!1,path:"/react",url:"".concat(k,"/javascript-in-jsx-with-curly-braces"),anchor:"curly-braces",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsxs)("p",{children:["JSX is a special way of writing JavaScript. That means it's possible to use JavaScript inside it\u2014with curly braces ","{}",". Any JavaScript expression will work between curly braces, including function calls. You can only use curly braces in two ways inside JSX: 1. As text directly inside a JSX tag. 2. As attributes immediately following the = sign."]}),Object(s.jsxs)("p",{children:["Using \u201cdouble curlies\u201d: CSS and other objects in JSX. In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like ",'{ name: "Hedy Lamarr", inventions: 5 }',". Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: person=",'{{ name: "Hedy Lamarr", inventions: 5 }}',". The next time you see"," ","{{ and }}"," in JSX, know that it's nothing more than an object inside the JSX curlies!"]})]})}},{id:Object(f.a)(),title:"Props",isLargerTitle:!1,path:"/react",url:"".concat(k,"/passing-props-to-a-component"),anchor:"prop",text:{p1:Object(s.jsx)("p",{children:"React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions. React component functions accept a single argument, a 'props' object. You can't change props. When you need interactivity, you'll need to set state."})}},{id:Object(f.a)(),title:"Pure components",isLargerTitle:!1,path:"/react",url:"".concat(k,"/keeping-components-pure"),anchor:"pure-components",text:{p1:Object(s.jsx)("p",{children:"Some JavaScript functions are \u201cpure.\u201d Pure functions only perform a calculation and nothing more. By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. A function is said to be pure if the return value is determined by its input values only and the return value is always the same for the same input values. A React component is said to be pure if it renders the same output for the same state and props. React's rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering\u2014that would make them impure!"})}},{id:Object(f.a)(),title:"Events",isLargerTitle:!1,path:"/react",url:"".concat(k,"/responding-to-events"),anchor:"responding-to-events",text:{p1:Object(s.jsx)("p",{children:"React lets you add event handlers to your JSX. To add an event handler, you will first define a function and then pass it as a prop to the appropriate JSX tag. Event handlers are the best place for side effects."})}},{id:Object(f.a)(),title:"State",isLargerTitle:!1,path:"/react",url:"".concat(k,"/state-a-components-memory"),anchor:"state-a-components-memory",text:{p1:Object(s.jsx)("p",{children:"Setting state only changes it for the next render. A state variable's value never changes within a render, even if its event handler's code is asynchronous. React keeps the state values \u201cfixed\u201d within one render's event handlers. You don't need to worry whether the state has changed while the code is running. Variables and event handlers don't \u201csurvive\u201d re-renders. Every render has its own event handlers. React waits until all code in the event handlers has run before processing your state updates. Setting state does not change the variable in the existing render, but it requests a new render. React processes state updates after event handlers have finished running. This is called batching."})}},{id:Object(f.a)(),title:"Object as state",isLargerTitle:!1,path:"/react",url:"".concat(k,"/updating-objects-in-state"),anchor:"updating-objects-in-state",text:{p1:Object(s.jsx)("p",{children:"State can hold any kind of JavaScript value, including objects. But you shouldn't change objects that you hold in the React state directly. Instead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy. You should treat any JavaScript object that you put into state as read-only."})}},{id:Object(f.a)(),title:"Array as state",isLargerTitle:!1,path:"/react",url:"".concat(k,"/updating-arrays-in-state"),anchor:"updating-arrays-in-state",text:{p1:Object(s.jsx)("p",{children:"Arrays are another type of mutable JavaScript objects you can store in state and should treat as immutable. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array."})}},{id:Object(f.a)(),title:"React.memo",isLargerTitle:!1,path:"/react",url:"".concat(T,"/react-api.html#reactmemo"),anchor:"react_memo",text:{p1:Object(s.jsx)("p",{children:"If your component renders the same result given the same props, you can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result. React.memo only checks for prop changes. If your function component wrapped in React.memo has a useState, useReducer or useContext Hook in its implementation, it will still rerender when state or context change. This function always used to wrap the child component to mitigate the child component's re-render."})}},{id:Object(f.a)(),title:"useCallback",isLargerTitle:!1,path:"/react",url:"".concat(T,"/hooks-reference.html#usecallback"),anchor:"useCallback",text:{p1:Object(s.jsx)("p",{children:"The callback function will be re-created as the component re-rendered when the state or props are changed. React's useCallback Hook can be used to optimize the rendering behavior of your React function components. Returns a memoized callback. Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate). useCallback function is used to wrap a function to mitigate the re-render when other function does noting."})}},{id:Object(f.a)(),title:"Higher-Order Components",isLargerTitle:!1,path:"/react",url:"".concat(T,"/higher-order-components.html"),anchor:"higher-order-components",text:{p1:Object(s.jsx)("p",{children:"Concretely, a higher-order component is a function that takes a component and returns a new component. Whereas a component transforms props into UI, a higher-order component transforms a component into another component."})}},{id:Object(f.a)(),title:"Reducer",isLargerTitle:!1,path:"/react",url:"".concat(k,"/extracting-state-logic-into-a-reducer"),anchor:"reducer",text:{p1:Object(s.jsx)("p",{children:"Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called a \u201creducer.\u201d"})}},{id:Object(f.a)(),title:"Refs",isLargerTitle:!1,path:"/react",url:"".concat(k,"/referencing-values-with-refs"),anchor:"refs",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"When you want a component to \u201cremember\u201d some information, but you don't want that information to trigger new renders, you can use a \"ref\"\u2014it's like a secret \u201cpocket\u201d for storing information in your component!"}),Object(s.jsx)("p",{children:"The ref points to a number, but, like state, you could point to anything: a string, an object, or even a function. Unlike state, ref is a plain JavaScript object with the current property that you can read and modify. Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not!"})]})}},{id:Object(f.a)(),title:"useEffect",isLargerTitle:!1,path:"/react",url:"".concat(T,"/hooks-effect.html"),anchor:"useEffect",text:{p1:Object(s.jsxs)("p",{children:["The ",Object(s.jsx)("i",{children:"Effect Hook"}),' lets you perform side effects(such as data fetching, changing the DOM manually) in function components. There are two kinds of side effects in React components. The "useEffect" function accpets two arguments: the first argument is a function(side effect). The second argument is a dependency array.']})}},{id:Object(f.a)(),title:"My Notes",isLargerTitle:!1,path:"/react",url:"",anchor:"my_notes",text:{p1:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:"The component (and the child component if there is) will be re-rendered when the state or props changed except the normal variables, and the value of normal variable will not be rendered when the next time change, state can be rendered."}),Object(s.jsx)("li",{children:"Props are a way of passing data from parent to child. "}),Object(s.jsx)("li",{children:"State is reserved only for interactivity, that is, data that changes over time."})]})}}];x(L);var _=L.length,S=(y([],_,L),[{id:Object(f.a)(),title:"React Router",isLargerTitle:!0,path:"/react-router",url:"https://reactrouter.com/docs/en/v6/getting-started/concepts",anchor:"react_router",text:{p1:Object(s.jsx)("p",{children:"React Router is a collection of React components, hooks and utilities that make it easy to build multi-page applications with React. React Router is used to controll the URL."})}},{id:Object(f.a)(),title:"URL",isLargerTitle:!1,path:"/react-router",anchor:"url",text:{p1:Object(s.jsx)("p",{children:'URL - The URL in the address bar. A lot of people use the term "URL" and "route" interchangeably, but this is not a route in React Router, it\'s just a URL.'})}},{id:Object(f.a)(),title:"Location",isLargerTitle:!1,path:"/react-router",anchor:"location",text:{p1:Object(s.jsx)("p",{children:"Location - This is a React Router specific object that is based on the built-in browser's window.location object. It represents \"where the user is at\". It's mostly an object representation of the URL but has a bit more to it than that. The browser has a location object on window.location. It tells you information about the URL but also has some methods to change it."})}},{id:Object(f.a)(),title:"Location hash",isLargerTitle:!1,path:"/react-router",anchor:"location_hash",text:{p1:Object(s.jsx)("p",{children:"Hashes in URLs indicate a scroll position on the current page. Before the window.history.pushState API was introduced, web developers did client side routing exclusively with the hash portion of the URL, it was the only part we could manipulate without making a new request to the server. However, today we can use it for its designed purpose."})}},{id:Object(f.a)(),title:"Location State",isLargerTitle:!1,path:"/react-router",anchor:"location_state",text:{p1:Object(s.jsx)("p",{children:"Location State - A value that persists with a location that isn't encoded in the URL. Much like hash or search params (data encoded in the URL), but stored invisibly in the browser's memory."}),p2:Object(s.jsx)("p",{children:"You set location state in two ways: on <Link> or navigate. And on the next page you can access it with useLocation"})}},{id:Object(f.a)(),title:"Location key",isLargerTitle:!1,path:"/react-router",anchor:"location_key",text:{p1:Object(s.jsx)("p",{children:"Each location gets a unique key. This is useful for advanced cases like location-based scroll management, client side data caching, and more. Because each new location gets a unique key, you can build abstractions that store information in a plain object, new Map(), or even locationStorage."})}},{id:Object(f.a)(),title:"History Stack",isLargerTitle:!1,path:"/react-router",anchor:"history_stack",text:{p1:Object(s.jsx)("p",{children:"History Stack - As the user navigates, the browser keeps track of each location in a stack. If you click and hold the back button in a browser you can see the browser's history stack right there."})}},{id:Object(f.a)(),title:"Client Side Routing (CSR)",isLargerTitle:!1,path:"/react-router",anchor:"csr",text:{p1:Object(s.jsx)("p",{children:"Client Side Routing (CSR) - A plain HTML document can link to other documents and the browser handles the history stack itself. Client Side Routing enables developers to manipulate the browser history stack without making a document request to the server."})}},{id:Object(f.a)(),title:"History",isLargerTitle:!1,path:"/react-router",anchor:"history",text:{p1:Object(s.jsx)("p",{children:"History - An object that allows React Router to subscribe to changes in the URL as well as providing APIs to manipulate the browser history stack programmatically."})}},{id:Object(f.a)(),title:"History Action",isLargerTitle:!1,path:"/react-router",anchor:"history_action",text:{p1:Object(s.jsx)("p",{children:"History Action - One of `POP`, `PUSH`, or `REPLACE`. Users can arrive at a URL for one of these three reasons. A push when a new entry is added to the history stack (typically a link click or the programmer forced a navigation). A replace is similar except it replaces the current entry on the stack instead of pushing a new one. Finally, a pop happens when the user clicks the back or forward buttons in the browser chrome."})}},{id:Object(f.a)(),title:"Segment",isLargerTitle:!1,path:"/react-router",anchor:"segment",text:{p1:Object(s.jsx)("p",{children:'Segment - The parts of a URL or path pattern between the / characters. For example, "/users/123" has two segments.'})}},{id:Object(f.a)(),title:"Path Pattern",isLargerTitle:!1,path:"/react-router",anchor:"path_pattern",text:{p1:Object(s.jsx)("p",{children:'Path Pattern - These look like URLs but can have special characters for matching URLs to routes, like dynamic segments ("/users/:userId") or star segments ("/docs/*"). They aren\'t URLs, they\'re patterns that React Router will match.'})}},{id:Object(f.a)(),title:"Dynamic Segment",isLargerTitle:!1,path:"/react-router",anchor:"dynamic_segment",text:{p1:Object(s.jsx)("p",{children:"Dynamic Segment - A segment of a path pattern that is dynamic, meaning it can match any values in the segment. For example the pattern /users/:userId will match URLs like /users/123"})}},{id:Object(f.a)(),title:"URL Params",isLargerTitle:!1,path:"/react-router",anchor:"url_params",text:{p1:Object(s.jsx)("p",{children:"URL Params - The parsed values from the URL that matched a dynamic segment."})}},{id:Object(f.a)(),title:"Router",isLargerTitle:!1,path:"/react-router",anchor:"router",text:{p1:Object(s.jsx)("p",{children:"Router - Stateful, top-level component that makes all the other components and hooks work."})}},{id:Object(f.a)(),title:"Route Config",isLargerTitle:!1,path:"/react-router",anchor:"route_config",text:{p1:Object(s.jsx)("p",{children:"Route Config - A tree of routes objects that will be ranked and matched (with nesting) against the current location to create a branch of route matches."})}},{id:Object(f.a)(),title:"Route",isLargerTitle:!1,path:"/react-router",anchor:"route",text:{p1:Object(s.jsx)("p",{children:"Route - An object or Route Element typically with a shape of (path, element) or <Route path element>. The path is a path pattern. When the path pattern matches the current URL, the element will be rendered."})}},{id:Object(f.a)(),title:"Route Element",isLargerTitle:!1,path:"/react-router",anchor:"route_element",text:{p1:Object(s.jsx)("p",{children:"Route Element - Or <Route>. This element's props are read to create a route by <Route>, but otherwise does nothing."})}},{id:Object(f.a)(),title:"Nested Routes",isLargerTitle:!1,path:"/react-router",anchor:"nested_routes",text:{p1:Object(s.jsx)("p",{children:'Nested Routes - Because routes can have children and each route defines a portion of the URL through segments, a single URL can match multiple routes in a nested "branch" of the tree. This enables automatic layout nesting through outlet, relative links, and more.'}),p2:Object(s.jsx)("p",{children:"The nested url segments map to nested component trees. This is perfect for creating UI that has persistent navigation in layouts with an inner section that changes with the URL. If you look around the web you'll notice many websites (and especially web apps) have multiple levels of layout nesting."}),p3:Object(s.jsx)("p",{children:"The parent route is responsible for making sure the matching child route is rendered with <Outlet>."})}},{id:Object(f.a)(),title:"Relative links",isLargerTitle:!1,path:"/react-router",anchor:"relative_links",text:{p1:Object(s.jsx)("p",{children:"Relative links - Links that don't start with / will inherit the closest route in which they are rendered. This makes it easy to link to deeper URLs without having to know and build up the entire path."})}},{id:Object(f.a)(),title:"Match",isLargerTitle:!1,path:"/react-router",anchor:"match",text:{p1:Object(s.jsx)("p",{children:"Match - An object that holds information when a route matches the URL, like the url params and pathname that matched."})}},{id:Object(f.a)(),title:"Matches",isLargerTitle:!1,path:"/react-router",anchor:"matches",text:{p1:Object(s.jsx)("p",{children:"Matches - An array of routes (or branch of the route config) that matches the current location. This structure enables nested routes."})}},{id:Object(f.a)(),title:"Parent Route",isLargerTitle:!1,path:"/react-router",anchor:"parent_route",text:{p1:Object(s.jsx)("p",{children:"Parent Route - A route with child routes."})}},{id:Object(f.a)(),title:"Outlet",isLargerTitle:!1,path:"/react-router",anchor:"Outlet",text:{p1:Object(s.jsx)("p",{children:"Outlet - A component that renders the next match in a set of matches."})}},{id:Object(f.a)(),title:"Index Route",isLargerTitle:!1,path:"/react-router",anchor:"index_route",text:{p1:Object(s.jsx)("p",{children:"Index Route - A child route with no path that renders in the parent's outlet at the parent's URL."})}},{id:Object(f.a)(),title:"Layout Route",isLargerTitle:!1,path:"/react-router",anchor:"layout_route",text:{p1:Object(s.jsx)("p",{children:"Layout Route - A parent route without a path, used exclusively for grouping child routes inside a specific layout."})}},{id:Object(f.a)(),title:"routing",isLargerTitle:!1,path:"/react-router",anchor:"routing",text:{p1:Object(s.jsx)("p",{children:"Routing is the process of deciding which React elements will be rendered on a given page of your app, and how they will be nested. React Router provides two interfaces for declaring your routes."})}},{id:Object(f.a)(),title:"navigation",isLargerTitle:!1,path:"/react-router",anchor:"navigation",text:{p1:Object(s.jsx)("p",{children:'React Router\'s navigation interfaces let you change the currently rendered page by modifying the current location. When the URL changes we call that a "navigation".'})}},{id:Object(f.a)(),title:"<BrowserRouter>",isLargerTitle:!1,path:"/react-router",anchor:"browserRouter",text:{p1:Object(s.jsx)("p",{children:"<BrowserRouter> is the recommended interface for running React Router in a web browser. A <BrowserRouter> stores the current location in the browser's address bar using clean URLs and navigates using the browser's built-in history stack."})}},{id:Object(f.a)(),title:"<Link>",isLargerTitle:!1,path:"/react-router",anchor:"link",text:{p1:Object(s.jsx)("p",{children:"A <Link> is an element that lets the user navigate to another page by clicking or tapping on it. In react-router-dom, a <Link> renders an accessible a element with a real href that points to the resource it's linking to. Let the user change the URL."}),p2:Object(s.jsx)("p",{children:"This is the primary means of navigation. Rendering a <Link> allows the user to change the URL when they click it. React Router will prevent the browser's default behavior and tell the history to push a new entry into the history stack. The location changes and the new matches will render."})}},{id:Object(f.a)(),title:"<Navlink>",isLargerTitle:!1,path:"/react-router",anchor:"navlink",text:{p1:Object(s.jsx)("p",{children:'A <NavLink> is a special kind of Link that knows whether or not it is "active". This is useful when building a navigation menu such as a breadcrumb or a set of tabs where you\'d like to show which of them is currently selected.'})}},{id:Object(f.a)(),title:"<Outlet>",isLargerTitle:!1,path:"/react-router",anchor:"outlet",text:{p1:Object(s.jsx)("p",{children:"An <Outlet> should be used in parent route elements to render their child route elements. This allows nested UI to show up when child routes are rendered. If the parent route matched exactly, it will render a child index route or nothing if there is no index route."})}},{id:Object(f.a)(),title:"<Routes> and <Route>",isLargerTitle:!1,path:"/react-router",anchor:"routes_and_route",text:{p1:Object(s.jsx)("p",{children:"<Routes> and <Route> are the primary ways to render something in React Router based on the current location. You can think about a <Route> kind of like an 'if' statement; if its 'path' matches the current URL, it renders its element! The <Route caseSensitive> prop determines if the matching should be done in a case-sensitive manner (defaults to false)."}),p2:Object(s.jsx)("p",{children:"Whenever the location changes, <Routes> looks through all its children <Routes> elements to find the best match and renders that branch of the UI. <Routes> elements may be nested to indicate nested UI, which also correspond to nested URL paths. Parent routes render their child routes by rendering an <Outlet>."}),p3:Object(s.jsx)("p",{children:"The default <Route element> is an <Outlet>. This means the route will still render its children even without an explicit element prop, so you can nest route paths without nesting UI around the child route elements. The <Route> is nested the UI will be nested too."})}},{id:Object(f.a)(),title:"index routes",isLargerTitle:!1,path:"/react-router",anchor:"index_routes",text:{p1:Object(s.jsx)("p",{children:'Index routes can be thought of as "default child routes". When a parent route has multiple children, but the URL is just at the parent\'s path, you probably want to render something into the outlet.'}),p2:Object(s.jsx)("p",{children:"You can have an index route at any level of the route hierarchy that will render when the parent matches but none of its other children do."})}},{id:Object(f.a)(),title:"'not found' routes",isLargerTitle:!1,path:"/react-router",anchor:"not_fount_routes",text:{p1:Object(s.jsx)("p",{children:'When no other route matches the URL, you can render a "not found" route using \' path="*" \'. This route will match any URL, but will have the weakest precedence so the router will only pick it if no other routes match.'})}},{id:Object(f.a)(),title:"multiple sets of routes",isLargerTitle:!1,path:"/react-router",anchor:"multiple_routes",text:{p1:Object(s.jsx)("p",{children:"Although you should only ever have a single <Router> in an app, you may have as many <Routes> as you need, wherever you need them. Each <Routes> element operates independently of the others and picks a child route to render."})}},{id:Object(f.a)(),title:"useParams() - reading url parameters",isLargerTitle:!1,path:"/react-router",anchor:"useParams",text:{p1:Object(s.jsx)("p",{children:"The useParams hook returns an object of key/value pairs of the dynamic params from the current URL that were matched by the <Route path>. Child routes inherit all params from their parent routes. Use ':style' syntax in your route path and useParams() to read them. A very common use-case is fetching data when the component renders."}),p2:Object(s.jsx)("p",{children:"Read the parameters from the current url if the <Route>'s path is the form :style, and then it will render the <Route>'s element if the <Route>'s path matched the current url. The matched element can read the parameters from the current url. The path parameter of <Route path=\":style\"> comes from the URL."})}},{id:Object(f.a)(),title:"useSearchParams() - Search params",isLargerTitle:!1,path:"/react-router",anchor:"useSearchParams",text:{p1:Object(s.jsx)("p",{children:'Search params are like URL params but they sit in a different position in the URL. Instead of being in the normal URL segments separated by /, they are at the end after a ?. You\'ve seen them across the web like "/login?success=1" or "/shoes?brand=nike&sort=asc&sortby=price".'}),p2:Object(s.jsx)("p",{children:"React Router makes it easy to read and manipulate the search params with useSearchParams. It works a lot like React.useState() but stores and sets the state in the URL search params instead of in memory."})}},{id:Object(f.a)(),title:"useNavigate()",isLargerTitle:!1,path:"/react-router",anchor:"useNavigate",text:{p1:Object(s.jsx)("p",{children:"The useNavigate hook returns a function that lets you navigate programmatically. This function is returned from the useNavigate hook and allows you, the programmer, to change the URL whenever you want."})}},{id:Object(f.a)(),title:"useLocation()",isLargerTitle:!1,path:"/react-router",anchor:"useLocation",text:{p1:Object(s.jsx)("p",{children:"This hook returns the current location object. This can be useful if you'd like to perform some side effect whenever the current location changes."})}},{id:Object(f.a)(),title:"useMatch()",isLargerTitle:!1,path:"/react-router",anchor:"useMatch",text:{p1:Object(s.jsx)("p",{children:"Returns match data about a route at the given path relative to the current location."})}},{id:Object(f.a)(),title:"Summary",isLargerTitle:!1,path:"/react-router",anchor:"Summary",text:{p1:Object(s.jsx)("ol",{className:"list",children:Object(s.jsx)("li",{children:"Link(a anchor) clicked -- pass parameters to url(route) -- we can use that parameters from the url(actually parameters from anchors)"})})}}]);x(S);var I=S.length,R=(y([],I,S),"https://redux.js.org/tutorials"),A=[{id:Object(f.a)(),title:"Redux Toolkit",isLargerTitle:!0,path:"/redux_toolkit",url:"https://redux-toolkit.js.org/",anchor:"redux_toolkit",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:'Redux is a pattern and library for managing and updating application state, using events called "actions". It serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.'}),Object(s.jsxs)("p",{children:["The whole global state of your app is stored in an object tree inside a ",Object(s.jsx)("i",{children:"single store"}),". The only way to change the state tree is to create an ",Object(s.jsx)("i",{children:"action"}),", an object describing what happened, and ",Object(s.jsx)("i",{children:"dispatch"})," it to the store. To specify how state gets updated in response to an action, you write pure ",Object(s.jsx)("i",{children:"reducer"})," ","functions that calculate a new state based on the old state and the action."]})]})}},{id:Object(f.a)(),title:"State Management",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#state-management"),anchor:"state_management",text:{p1:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsxs)("li",{children:["The ",Object(s.jsx)("strong",{children:"state"}),", the source of truth that drives our app;"]}),Object(s.jsxs)("li",{children:["The ",Object(s.jsx)("strong",{children:"view"}),", a declarative description of the UI based on the current state;"]}),Object(s.jsxs)("li",{children:["The ",Object(s.jsx)("strong",{children:"actions"}),", the events that occur in the app based on user input, and trigger updates in the state."]})]})}},{id:Object(f.a)(),title:"one-way data flow",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#state-management"),anchor:"one-way_data_flow",text:{p1:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:"State describes the condition of the app at a specific point in time."}),Object(s.jsx)("li",{children:"State describes the condition of the app at a specific point in time."}),Object(s.jsx)("li",{children:"When something happens (such as a user clicking a button), the state is updated based on what occurred."}),Object(s.jsx)("li",{children:"The UI re-renders based on the new state."})]})}},{id:Object(f.a)(),title:"Action",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#actions"),anchor:"Actions",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:'An action is a plain JavaScript object that has a "type" field. You can think of an action as an event that describes something that happened in the application.'}),Object(s.jsx)("p",{children:'The "type" field should be a string that gives this action a descriptive name, like "todos/todoAdded". We usually write that type string like "domain/eventName", where the first part is the feature or category that this action belongs to, and the second part is the specific thing that happened.'}),Object(s.jsx)("p",{children:'An action object can have other fields with additional information about what happened. By convention, we put that information in a field called "payload".'})]})}},{id:Object(f.a)(),title:"Action Creators",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#action-creators"),anchor:"Action_Creators",text:{p1:Object(s.jsx)("p",{children:"An action creator is a function that creates and returns an action object. We typically use these so we don't have to write the action object by hand every time."})}},{id:Object(f.a)(),title:"Reducers",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#reducers"),anchor:"Reducers",text:{p1:Object(s.jsx)("p",{children:"A reducer is a function that receives the current state and an action object, decides how to update the state if necessary, and returns the new state: (state, action) => newState. You can think of a reducer as an event listener which handles events based on the received action (event) type."})}},{id:Object(f.a)(),title:"Store",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#store"),anchor:"Store",text:{p1:Object(s.jsx)("p",{children:'The current Redux application state lives in an object called the store. The store is created by passing in a reducer, and has a method called "getState" that returns the current state value.'})}},{id:Object(f.a)(),title:"Dispatch",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#dispatch"),anchor:"Dispatch",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:'The Redux store has a method called "dispatch". The only way to update the state is to call "store.dispatch()" and pass in an action object. The store will run its reducer function and save the new state value inside, and we can call "getState()" to retrieve the updated value.'}),Object(s.jsx)("p",{children:'You can think of dispatching actions as "triggering an event" in the application. Something happened, and we want the store to know about it. Reducers act like event listeners, and when they hear an action they are interested in, they update the state in response.'})]})}},{id:Object(f.a)(),title:"Selectors",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-1-overview-concepts#selectors"),anchor:"Selectors",text:{p1:Object(s.jsx)("p",{children:'Selectors are functions that know how to extract specific pieces of information from a store state value. As an application grows bigger, this can help avoid repeating logic as different parts of the app need to read the same data. The argument "state" represents the root state and return some data.'})}},{id:Object(f.a)(),title:"Redux Slices",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-2-app-structure#redux-slices"),anchor:"Redux_Slices",text:{p1:Object(s.jsx)("p",{children:'A "slice" is a collection of Redux reducer logic and actions for a single feature in your app, typically defined together in a single file. The name comes from splitting up the root Redux state object into multiple "slices" of state.'})}},{id:Object(f.a)(),title:"Thunk",isLargerTitle:!1,path:"/redux_toolkit",url:"https://redux.js.org/usage/writing-logic-thunks",anchor:"thunk",text:{p1:Object(s.jsxs)("p",{children:['The word "thunk" is a programming term that means "a piece of code that does some delayed work". Rather than execute some logic now, we can write a function body or code that can be used to perform the work later. For Redux specifically,'," ",Object(s.jsx)("strong",{children:'"thunks" are a pattern of writing functions with logic inside that can interact with a Redux store\'s dispatch and getState methods.'})]})}},{id:Object(f.a)(),title:"Thunk Functions",isLargerTitle:!1,path:"/redux_toolkit",url:"".concat(R,"/essentials/part-5-async-logic#thunk-functions"),anchor:"thunk_functions",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"A thunk function is a function that let you write plain functions that may contain async logic directly. Once the thunk middleware has been added to the Redux store, it allows you to pass thunk functions directly to store.dispatch. A thunk function will always be called with (dispatch, getState) as its arguments, and you can use them inside the thunk as needed. Thunks typically dispatch plain actions using action creators, like dispatch(increment())."}),Object(s.jsx)("p",{children:"For consistency with dispatching normal action objects, we typically write these as thunk action creators, which return the thunk function. These action creators can take arguments that can be used inside the thunk."})]})}},{id:Object(f.a)(),title:"Thunk action creators",isLargerTitle:!1,path:"/redux_toolkit",url:"https://redux.js.org/usage/writing-logic-thunks",anchor:"thunk_action_creators",text:{p1:Object(s.jsx)("p",{children:"Redux code normally uses action creators to generate action objects for dispatching instead of writing action objects by hand, we normally use thunk action creators to generate the thunk functions that are dispatched. A thunk action creator is a function that may have some arguments, and returns a new thunk function. The thunk typically closes over any arguments passed to the action creator, so they can be used in the logic. These action creators can take arguments that can be used inside the thunk."})}},{id:Object(f.a)(),title:"Summary",isLargerTitle:!1,path:"/redux_toolkit",url:"",anchor:"Summary",text:{p1:Object(s.jsx)("ol",{className:"list",children:Object(s.jsx)("li",{children:"Using middleware(redux-thunk) to enable async logic to interact with store and then dispatch a action(plain object) to the reducer to change the state in the store."})})}}],C=A.length;x(A);y([],C,A);var P="https://www.javatpoint.com",W=[{id:Object(f.a)(),title:"TypeScript",isLargerTitle:!0,path:"/typescript",url:"".concat("https://www.typescriptlang.org"),anchor:"typescript",text:{p1:Object(s.jsx)("p",{children:"TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. Types are used to determine both reading and writing behavior."})}},{id:Object(f.a)(),title:"Type Assertion",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-type-assertion"),anchor:"Type_Assertion",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"In TypeScript, type assertion is a mechanism which tells the compiler about the type of a variable. When TypeScript determines that the assignment is invalid, then we have an option to override the type using a type assertion. If we use a type assertion, the assignment is always valid, so we need to be sure that we are right. Otherwise, our program may not work correctly. Type assertion is explicitly telling the compiler that we want to treat the entity as a different type."}),Object(s.jsx)("p",{children:'Two ways to show type assertion: 1.Use bracket "<>". 2.Use "as" keyword.'})]})}},{id:Object(f.a)(),title:"Array",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-arrays"),anchor:"array",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"An array is a homogenous collection of similar type of elements which have a contiguous memory location. An array is a user-defined data type."}),Object(s.jsx)("p",{children:"Array declaration: 1. Using square bracket []. 2. Using a generic array type."})]})}},{id:Object(f.a)(),title:"Tuples",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-tuples"),anchor:"tuples",text:{p1:Object(s.jsx)("p",{children:"We know that an array holds multiple values of the same data type. But sometimes, we may need to store a collection of values of different data types in a single variable. Arrays will not provide this feature, but TypeScript has a data type called Tuple to achieve this purpose. A Tuple is an array which store multiple fields belong to different data types. It is similar to the structures in the C programming language."})}},{id:Object(f.a)(),title:"Union",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-union"),anchor:"union",text:{p1:Object(s.jsx)("p",{children:"In TypeScript, we can define a variable which can have multiple types of values. In other words, TypeScript can combine one or two different types of data (i.e., number, string, etc.) in a single type, which is called a union type. Union types are a powerful way to express a variable with multiple types. Two or more data types can be combined by using the pipe ('|') symbol between the types."})}},{id:Object(f.a)(),title:"Enums",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-enums"),anchor:"Enums",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"Enums stands for Enumerations. Enums are a new data type supported in TypeScript. It is used to define the set of named constants, i.e., a collection of related values. TypeScript supports both numeric and string-based enums. We can define the enums by using the enum keyword."}),Object(s.jsx)("p",{children:"There are three types of Enums in TypeScript. These are: 1. Numeric Enums. 2. String Enums. 3. Heterogeneous Enums."})]})}},{id:Object(f.a)(),title:"Access Modifiers",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-access-modifiers"),anchor:"Access_Modifiers",text:{p1:Object(s.jsx)("p",{children:"Like other programming languages, Typescript allows us to use access modifiers at the class level. It gives direct access control to the class member. These class members are functions and properties. We can use class members inside its own class, anywhere outside the class, or within its child or derived class."})}},{id:Object(f.a)(),title:"Function Overloading",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-function-overloading"),anchor:"Function_Overloading",text:{p1:Object(s.jsx)("p",{children:"Function overloading is a mechanism or ability to create multiple methods with the same name but different parameter types and return type. However, it can have the same number of parameters. Function overloading is also known as method overloading."})}},{id:Object(f.a)(),title:"Interface",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-interface"),anchor:"Interface",text:{p1:Object(s.jsx)("p",{children:'An Interface is a structure which acts as a contract in our application. It defines the syntax for classes to follow, means a class which implements an interface is bound to implement all its members. We cannot instantiate the interface, but it can be referenced by the class object that implements it. The TypeScript compiler uses interface for type-checking (also known as "duck typing" or "structural subtyping") whether the object has a specific structure or not.'})}},{id:Object(f.a)(),title:"Generics",isLargerTitle:!1,path:"/typescript",url:"".concat(P,"/typescript-generics"),anchor:"Generics",text:{p1:Object(s.jsx)("p",{children:"TypeScript Generics is a tool which provides a way to create reusable components. It creates a component that can work with a variety of data types rather than a single data type. It allows users to consume these components and use their own types. Generics ensures that the program is flexible as well as scalable in the long term."})}}],q="https://developer.mozilla.org/en-US/docs/Web/API",U="https://developer.mozilla.org/en-US/docs/Web/JavaScript",D="https://developer.mozilla.org/en-US/docs/Glossary",H=[{id:Object(f.a)(),title:"JavaScript",isLargerTitle:!0,path:"/javascript",url:"".concat(U),anchor:"javascript",text:{p1:Object(s.jsx)("p",{children:"JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles."})}},{id:Object(f.a)(),title:"Window.location",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Window/location"),anchor:"window_location",text:{p1:Object(s.jsx)("p",{children:"The Window.location read-only property returns a Location object with information about the current location of the document."})}},{id:Object(f.a)(),title:"Location",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Location"),anchor:"location",text:{p1:Object(s.jsx)("p",{children:"The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively."})}},{id:Object(f.a)(),title:"Window.history",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Window/history"),anchor:"window_history",text:{p1:Object(s.jsx)("p",{children:"The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in)."})}},{id:Object(f.a)(),title:"History",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/History "),anchor:"history",text:{p1:Object(s.jsx)("p",{children:"The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in."})}},{id:Object(f.a)(),title:"history.pushState()",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/History/pushState"),anchor:"history_pushState",text:{p1:Object(s.jsx)("p",{children:"In an HTML document, the history.pushState() method adds an entry to the browser's session history stack."})}},{id:Object(f.a)(),title:"Window: popstate event",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Window/popstate_event"),anchor:"popstate_event",text:{p1:Object(s.jsx)("p",{children:"The popstate event of the Window interface is fired when the active history entry changes while the user navigates the session history. It changes the current history entry to that of the last page the user visited or, if history.pushState() has been used to add a history entry to the history stack, that history entry is used instead."})}},{id:Object(f.a)(),title:"Spread syntax (...)",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/Reference/Operators/Spread_syntax"),anchor:"Spread_syntax",text:{p1:Object(s.jsx)("p",{children:"Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected."})}},{id:Object(f.a)(),title:"Proxy",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/Reference/Global_Objects/Proxy"),anchor:"Spread_syntax",text:{p1:Object(s.jsx)("p",{children:"The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object."})}},{id:Object(f.a)(),title:"Element.scrollIntoView()",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Element/scrollIntoView"),anchor:"scrollIntoView",text:{p1:Object(s.jsx)("p",{children:"The Element interface's scrollIntoView() method scrolls the element's parent container such that the element on which scrollIntoView() is called is visible to the user."})}},{id:Object(f.a)(),title:"Window.scrollTo()",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Window/scrollTo"),anchor:"scrollTo",text:{p1:Object(s.jsx)("p",{children:"Window.scrollTo() scrolls to a particular set of coordinates in the document."})}},{id:Object(f.a)(),title:"Window.scroll()",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Window/scroll"),anchor:"scroll",text:{p1:Object(s.jsx)("p",{children:"The Window.scroll() method scrolls the window to a particular place in the document."})}},{id:Object(f.a)(),title:"Window.scrollY",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Window/scrollY"),anchor:"scrollY",text:{p1:Object(s.jsx)("p",{children:"The read-only scrollY property of the Window interface returns the number of pixels that the document is currently scrolled vertically."})}},{id:Object(f.a)(),title:"DOMTokenList",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/DOMTokenList"),anchor:"DOMTokenList",text:{p1:Object(s.jsx)("p",{children:"The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList or HTMLLinkElement.relList, and many others."})}},{id:Object(f.a)(),title:"Closures",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/Closures"),anchor:"Closures",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time."}),Object(s.jsx)("p",{children:"Closures are useful because they let you associate data (the lexical environment) with a function that operates on that data. This has obvious parallels to object-oriented programming, where objects allow you to associate data (the object's properties) with one or more methods. Consequently, you can use a closure anywhere that you might normally use an object with only a single method."})]})}},{id:Object(f.a)(),title:"Node.childNodes",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Node/childNodes"),anchor:"Node_childNodes",text:{p1:Object(s.jsx)("p",{children:"The read-only childNodes property of the Node interface returns a live NodeList of child nodes of the given element where the first child node is assigned index 0. Child nodes include elements, text and comments."})}},{id:Object(f.a)(),title:"Array.prototype.sort()",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/Reference/Global_Objects/Array/sort"),anchor:"Array_prototype_sort",text:{p1:Object(s.jsx)("p",{children:"The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values."})}},{id:Object(f.a)(),title:"DOMTokenList.contains()",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/DOMTokenList/contains"),anchor:"DOMTokenList_contains",text:{p1:Object(s.jsx)("p",{children:"The contains() method of the DOMTokenList interface returns a boolean value \u2014 true if the underlying list contains the given token, otherwise false."})}},{id:Object(f.a)(),title:"Element.clientHeight",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/Element/clientHeight"),anchor:"Element_clientHeight",text:{p1:Object(s.jsx)("p",{children:"The Element.clientHeight read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels. It includes padding but excludes borders, margins, and horizontal scrollbars (if present)."})}},{id:Object(f.a)(),title:"Call stack",isLargerTitle:!1,path:"/javascript",url:"https://developer.mozilla.org/en-US/docs/Glossary/Call_stack",anchor:"Call_stack",text:{p1:Object(s.jsx)("p",{children:"A call stack is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its place in a script that calls multiple functions \u2014 what function is currently being run and what functions are called from within that function."})}},{id:Object(f.a)(),title:"The event loop",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/EventLoop"),anchor:"The_event_loop",text:{p1:Object(s.jsx)("p",{children:"JavaScript has a runtime model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java."})}},{id:Object(f.a)(),title:"Stack",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/EventLoop#stack"),anchor:"Stack",text:{p1:Object(s.jsx)("p",{children:"Function calls form a stack of frames."})}},{id:Object(f.a)(),title:"Heap",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/EventLoop#Heap"),anchor:"Heap",text:{p1:Object(s.jsx)("p",{children:"Objects are allocated in a heap which is just a name to denote a large (mostly unstructured) region of memory."})}},{id:Object(f.a)(),title:"Queue",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/EventLoop#Queue"),anchor:"Queue",text:{p1:Object(s.jsx)("p",{children:"A JavaScript runtime uses a message queue, which is a list of messages to be processed. Each message has an associated function that gets called to handle the message."})}},{id:Object(f.a)(),title:"Run-to-completion",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/EventLoop#run-to-completion"),anchor:"run-to-completion",text:{p1:Object(s.jsx)("p",{children:"Each message is processed completely before any other message is processed. This offers some nice properties when reasoning about your program, including the fact that whenever a function runs, it cannot be preempted and will run entirely before any other code runs (and can modify data the function manipulates)."})}},{id:Object(f.a)(),title:"Adding messages",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/EventLoop#adding_messages"),anchor:"Adding_messages",text:{p1:Object(s.jsx)("p",{children:"In web browsers, messages are added anytime an event occurs and there is an event listener attached to it. If there is no listener, the event is lost. So a click on an element with a click event handler will add a message\u2014likewise with any other event."})}},{id:Object(f.a)(),title:"Main thread",isLargerTitle:!1,path:"/javascript",url:"".concat(D,"/Main_thread"),anchor:"Main_thread",text:{p1:Object(s.jsx)("p",{children:"The main thread is where a browser processes user events and paints. By default, the browser uses a single thread to run all the JavaScript in your page, as well as to perform layout, reflows, and garbage collection. This means that long-running JavaScript functions can block the thread, leading to an unresponsive page and a bad user experience."})}},{id:Object(f.a)(),title:"Thread",isLargerTitle:!1,path:"/javascript",url:"".concat(D,"/Thread"),anchor:"Thread",text:{p1:Object(s.jsx)("p",{children:"Thread in computer science is the execution of running multiple tasks or programs at the same time. Each unit capable of executing code is called a thread."})}},{id:Object(f.a)(),title:"Tasks",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/HTML_DOM_API/Microtask_guide#tasks"),anchor:"Tasks",text:{p1:Object(s.jsx)("p",{children:"A task is any JavaScript code which is scheduled to be run by the standard mechanisms such as initially starting to run a program, an event callback being run, or an interval or timeout being fired. These all get scheduled on the task queue."})}},{id:Object(f.a)(),title:"Microtasks",isLargerTitle:!1,path:"/javascript",url:"".concat(q,"/HTML_DOM_API/Microtask_guide#microtasks"),anchor:"Microtasks",text:{p1:Object(s.jsx)("p",{children:"At first the difference between microtasks and tasks seems minor. And they are similar; both are made up of JavaScript code which gets placed on a queue and run at an appropriate time. However, whereas the event loop runs only the tasks present on the queue when the iteration began, one after another, it handles the microtask queue very differently."})}},{id:Object(f.a)(),title:"JSON",isLargerTitle:!1,path:"/javascript",url:"".concat(D,"/JSON"),anchor:"JSON",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"JavaScript Object Notation (JSON) is a data-interchange format. Although not a strict subset, JSON closely resembles a subset of JavaScript syntax. Though many programming languages support JSON, it is especially useful for JavaScript-based apps, including websites and browser extensions."}),Object(s.jsx)("p",{children:"JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa)."})]})}},{id:Object(f.a)(),title:"Deep copy",isLargerTitle:!1,path:"/javascript",url:"".concat(D,"/Deep_copy"),anchor:"Deep_copy",text:{p1:Object(s.jsx)("p",{children:"A deep copy of an object is a copy whose properties do not share the same references (point to the same underlying values) as those of the source object from which the copy was made. As a result, when you change either the source or the copy, you can be assured you're not causing the other object to change too; that is, you won't unintentionally be causing changes to the source or copy that you don't expect. That behavior contrasts with the behavior of a shallow copy, in which changes to either the source or the copy may also cause the other object to change too (because the two objects share the same references)."})}},{id:Object(f.a)(),title:"Serialization",isLargerTitle:!1,path:"/javascript",url:"".concat(D,"/Serialization"),anchor:"Serialization",text:{p1:Object(s.jsx)("p",{children:"The process whereby an object or data structure is translated into a format suitable for transferral over a network, or storage (e.g. in an array buffer or file format). In JavaScript, for example, you can serialize an object to a JSON string by calling the function JSON.stringify()."})}},{id:Object(f.a)(),title:"Transferable objects",isLargerTitle:!1,path:"/javascript",url:"".concat(D,"/Transferable_objects"),anchor:"Transferable_objects",text:{p1:Object(s.jsx)("p",{children:"Transferable objects are objects that own resources that can be transferred from one context to another, ensuring that the resources are only available in one context at a time. Following a transfer, the original object is no longer usable; it no longer points to the transferred resource, and any attempt to read or write the object will throw an exception."})}},{id:Object(f.a)(),title:"String.prototype.localeCompare()",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/Reference/Global_Objects/String/localeCompare"),anchor:"localeCompare",text:{p1:Object(s.jsx)("p",{children:"The localeCompare() method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order."})}},{id:Object(f.a)(),title:"Shallow copy",isLargerTitle:!1,path:"/javascript",url:"".concat(D,"/Shallow_copy"),anchor:"Shallow_copy",text:{p1:Object(s.jsx)("p",{children:"A shallow copy of an object is a copy whose properties share the same references (point to the same underlying values) as those of the source object from which the copy was made. As a result, when you change either the source or the copy, you may also cause the other object to change too \u2014 and so, you may end up unintentionally causing changes to the source or copy that you don't expect. That behavior contrasts with the behavior of a deep copy, in which the source and copy are completely independent."})}},{id:Object(f.a)(),title:"Object.prototype.constructor",isLargerTitle:!1,path:"/javascript",url:"".concat(U,"/Reference/Global_Objects/Object/constructor"),anchor:"constructor",text:{p1:Object(s.jsx)("p",{children:"The constructor property returns a reference to the Object constructor function that created the instance object. Note that the value of this property is a reference to the function itself, not a string containing the function's name."})}}];x(H);var G=H.length,M=(y([],G,H),"https://en.wikipedia.org/wiki"),E=[{id:Object(f.a)(),title:"Computer Science terms",isLargerTitle:!0,path:"/cs",url:"",anchor:"computer_science_terms",text:{p1:Object(s.jsxs)("p",{children:["This topic is about the common terms in computer science or computer programming languages. Want to know more? Please"," ",Object(s.jsx)("a",{href:"".concat(M,"/Category:Computers"),target:"blank",children:"CLICK HERE."})]})}},{id:Object(f.a)(),title:"Single-responsibility principle",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Single-responsibility_principle"),anchor:"single_responsibility_principle",text:{p1:Object(s.jsx)("p",{children:"The single-responsibility principle (SRP) is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program's functionality, and it should encapsulate that part. All of that module, class or function's services should be narrowly aligned with that responsibility."})}},{id:Object(f.a)(),title:"Don't repeat yourself",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Don%27t_repeat_yourself"),anchor:"dont_repeat_yourself",text:{p1:Object(s.jsx)("p",{children:'"Don\'t repeat yourself" (DRY, or sometimes "do not repeat yourself") is a principle of software development aimed at reducing repetition of software patterns, replacing it with abstractions or using data normalization to avoid redundancy. The DRY principle is stated as "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system". When the DRY principle is applied successfully, a modification of any single element of a system does not require a change in other logically unrelated elements. Additionally, elements that are logically related all change predictably and uniformly, and are thus kept in sync.'})}},{id:Object(f.a)(),title:"Memoization",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Memoization"),anchor:"memoization",text:{p1:Object(s.jsx)("p",{children:"In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again. Memoization has also been used in other contexts (and for purposes other than speed gains), such as in simple mutually recursive descent parsing. Although related to caching, memoization refers to a specific case of this optimization, distinguishing it from forms of caching such as buffering or page replacement. In the context of some logic programming languages, memoization is also known as tabling."})}},{id:Object(f.a)(),title:"Computer Programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Computer_programming"),anchor:"computer_programming",text:{p1:Object(s.jsx)("p",{children:"Computer programming is the process of designing and building an executable computer program to accomplish a specific computing result or to perform a particular task."})}},{id:Object(f.a)(),title:"Variable",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Variable_(computer_science)"),anchor:"variable",text:{p1:Object(s.jsx)("p",{children:"In computer programming, a variable or scalar is an abstract storage location paired with an associated symbolic name, which contains some known or unknown quantity of information referred to as a value; or in simpler terms, a variable is a container for a particular set of bits or type of data (like integer, float, String etc...)."})}},{id:Object(f.a)(),title:"Subroutine",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Subroutine"),anchor:"subroutine",text:{p1:Object(s.jsx)("p",{children:"In computer programming, a subroutine is a sequence of program instructions that performs a specific task, packaged as a unit. This unit can then be used in programs wherever that particular task should be performed."})}},{id:Object(f.a)(),title:"Identifier",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Identifier_(computer_languages)"),anchor:"identifier",text:{p1:Object(s.jsx)("p",{children:"In computer programming languages, an identifier is lexical token (also called symbol, but not to be confused with the symbol primitive data type) that names the language's entities. Some of the kinds of entities an identifier might denote include variables, data types, labels, subroutines, and modules."})}},{id:Object(f.a)(),title:"Name binding",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Name_binding"),anchor:"name_binding",text:{p1:Object(s.jsx)("p",{children:"In programming languages, name binding is the association of entities (data and/or code) with identifiers. An identifier bound to an object is said to reference that object. Machine languages have no built-in notion of identifiers, but name-object bindings as a service and notation for the programmer is implemented by programming languages. Binding is intimately connected with scoping, as scope determines which names bind to which objects - at which locations in the program code (lexically) and in which one of the possible execution paths (temporally)."})}},{id:Object(f.a)(),title:"Reference",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Reference_(computer_science)"),anchor:"reference",text:{p1:Object(s.jsx)("p",{children:"In computer science, a reference is a value that enables a program to indirectly access a particular data, such as a variable's value or a record, in the computer's memory or in some other storage device. The reference is said to refer to the datum, and accessing the datum is called dereferencing the reference."})}},{id:Object(f.a)(),title:"Statement",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Statement_(computer_science)"),anchor:"statement",text:{p1:Object(s.jsx)("p",{children:"In computer programming, a statement is a syntactic unit of an imperative programming language that expresses some action to be carried out. A program written in such a language is formed by a sequence of one or more statements. A statement may have internal components (e.g., expressions)."})}},{id:Object(f.a)(),title:"Expression",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Expression_(computer_science)"),anchor:"expression",text:{p1:Object(s.jsx)("p",{children:'In computer science, an expression is a syntactic entity in a programming language that may be evaluated to determine its value. It is a combination of one or more constants, variables, functions, and operators that the programming language interprets (according to its particular rules of precedence and of association) and computes to produce ("to return", in a stateful environment) another value. This process, for mathematical expressions, is called evaluation.'})}},{id:Object(f.a)(),title:"Assignment",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Assignment_(computer_science)"),anchor:"assignment",text:{p1:Object(s.jsx)("p",{children:"In computer programming, an assignment statement sets and/or re-sets the value stored in the storage location(s) denoted by a variable name; in other words, it copies a value into the variable. In most imperative programming languages, the assignment statement (or expression) is a fundamental construct."})}},{id:Object(f.a)(),title:"Operator",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Operator_(computer_science)"),anchor:"operator",text:{p1:Object(s.jsx)("p",{children:"In computer programming, operators are constructs defined within programming languages which behave generally like functions, but which differ syntactically or semantically."})}},{id:Object(f.a)(),title:"Immutable object",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Immutable_object"),anchor:"immutable_object",text:{p1:Object(s.jsx)("p",{children:"In object-oriented and functional programming, an immutable object (unchangeable object) is an object whose state cannot be modified after it is created. This is in contrast to a mutable object (changeable object), which can be modified after it is created. In some cases, an object is considered immutable even if some internally used attributes change, but the object's state appears unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object."})}},{id:Object(f.a)(),title:"Object-oriented programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Object-oriented_programming"),anchor:"object_oriented_programming",text:{p1:Object(s.jsx)("p",{children:'Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods). A feature of objects is that an object\'s own procedures can access and often modify the data fields of itself (objects have a notion of this or self). In OOP, computer programs are designed by making them out of objects that interact with one another. OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types.'})}},{id:Object(f.a)(),title:"Object",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Object_(computer_science)"),anchor:"object",text:{p1:Object(s.jsx)("p",{children:"In computer science, an object can be a variable, a data structure, a function, or a method. As regions of memory, they contain value and are referenced by identifiers. In the object-oriented programming paradigm, object can be a combination of variables, functions, and data structures; in particular in class-based variations of the paradigm it refers to a particular instance of a class. In the relational model of database management, an object can be a table or column, or an association between data and a database entity (such as relating a person's age to a specific person)."})}},{id:Object(f.a)(),title:"State",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/State_(computer_science)"),anchor:"state",text:{p1:Object(s.jsx)("p",{children:"In information technology and computer science, a system is described as stateful if it is designed to remember preceding events or user interactions; the remembered information is called the state of the system. Similarly, a computer program stores data in variables, which represent storage locations in the computer's memory. The contents of these memory locations, at any given point in the program's execution, is called the program's state."})}},{id:Object(f.a)(),title:"Data structure",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Data_structure"),anchor:"data_structure",text:{p1:Object(s.jsx)("p",{children:"In computer science, a data structure is a data organization, management, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data, i.e., it is an algebraic structure about data."})}},{id:Object(f.a)(),title:"Algorithm",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Algorithm"),anchor:"algorithm",text:{p1:Object(s.jsx)("p",{children:"In mathematics and computer science, an algorithm is a finite sequence of well-defined instructions, typically used to solve a class of specific problems or to perform a computation. Algorithms are used as specifications for performing calculations, data processing, automated reasoning, automated decision-making and other tasks. In contrast, a heuristic is an approach to problem solving that may not be fully specified or may not guarantee correct or optimal results, especially in problem domains where there is no well-defined correct or optimal result."})}},{id:Object(f.a)(),title:"Input/output",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Input/output"),anchor:"Input/output",text:{p1:Object(s.jsx)("p",{children:'In computing, input/output (I/O, or informally io or IO) is the communication between an information processing system, such as a computer, and the outside world, possibly a human or another information processing system. Inputs are the signals or data received by the system and outputs are the signals or data sent from it. The term can also be used as part of an action; to "perform I/O" is to perform an input or output operation.'})}},{id:Object(f.a)(),title:"Side effect",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Side_effect_(computer_science)"),anchor:"Side_effect",text:{p1:Object(s.jsx)("p",{children:'In computer science, an operation, function or expression is said to have a side effect if it modifies some state variable value(s) outside its local environment, that is to say has an observable effect besides returning a value (the intended effect) to the invoker of the operation. State data updated "outside" of the operation may be maintained "inside" a stateful object or a wider stateful system within which the operation is performed. Example side effects include modifying a non-local variable, modifying a static local variable, modifying a mutable argument passed by reference, performing I/O or calling other side-effect functions. In the presence of side effects, a program\'s behaviour may depend on history; that is, the order of evaluation matters. Understanding and debugging a function with side effects requires knowledge about the context and its possible histories.'})}},{id:Object(f.a)(),title:"Scope",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Scope_(computer_science)"),anchor:"Scope",text:{p1:Object(s.jsx)("p",{children:"In computer programming, the scope of a name binding\u2014an association of a name to an entity, such as a variable\u2014is the part of a program where the name binding is valid, that is where the name can be used to refer to the entity. In other parts of the program the name may refer to a different entity (it may have a different binding), or to nothing at all (it may be unbound). The scope of a name binding is also known as the visibility of an entity, particularly in older or more technical literature\u2014this is from the perspective of the referenced entity, not the referencing name."})}},{id:Object(f.a)(),title:"Asynchrony",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Asynchrony_(computer_programming)"),anchor:"Asynchrony",text:{p1:Object(s.jsx)("p",{children:'Asynchrony, in computer programming, refers to the occurrence of events independent of the main program flow and ways to deal with such events. These may be "outside" events such as the arrival of signals, or actions instigated by a program that take place concurrently with program execution, without the program blocking to wait for results. Asynchronous input/output is an example of the latter case of asynchrony, and lets programs issue commands to storage or network devices that service these requests while the processor continues executing the program. Doing so provides a degree of parallelism.'})}},{id:Object(f.a)(),title:"Futures and promises",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Futures_and_promises"),anchor:"Futures_and_promises",text:{p1:Object(s.jsx)("p",{children:"In computer science, future, promise, delay, and deferred refer to constructs used for synchronizing program execution in some concurrent programming languages. They describe an object that acts as a proxy for a result that is initially unknown, usually because the computation of its value is not yet complete."})}},{id:Object(f.a)(),title:"Control flow",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Control_flow"),anchor:"Control_flow",text:{p1:Object(s.jsx)("p",{children:"In computer science, control flow (or flow of control) is the order in which individual statements, instructions or function calls of an imperative program are executed or evaluated. The emphasis on explicit control flow distinguishes an imperative programming language from a declarative programming language."})}},{id:Object(f.a)(),title:"Block (programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Block_(programming)"),anchor:"Block_(programming)",text:{p1:Object(s.jsx)("p",{children:"In computer programming, a block or code block or block of code is a lexical structure of source code which is grouped together. Blocks consist of one or more declarations and statements. A programming language that permits the creation of blocks, including blocks nested within other blocks, is called a block-structured programming language. Blocks are fundamental to structured programming, where control structures are formed from blocks."})}},{id:Object(f.a)(),title:"Declaration",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Declaration_(computer_programming)"),anchor:"Declaration",text:{p1:Object(s.jsx)("p",{children:'In computer programming, a declaration is a language construct that specifies properties of an identifier: it declares what a word (identifier) "means". Declarations are most commonly used for functions, variables, constants, and classes, but can also be used for other entities such as enumerations and type definitions.'})}},{id:Object(f.a)(),title:"Modular programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Modular_programming"),anchor:"Modular_programming",text:{p1:Object(s.jsx)("p",{children:"Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality."})}},{id:Object(f.a)(),title:"Programming paradigm",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Programming_paradigm"),anchor:"Programming_paradigm",text:{p1:Object(s.jsx)("p",{children:"Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms."})}},{id:Object(f.a)(),title:"Imperative programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Imperative_programming"),anchor:"Imperative_programming",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"In computer science, imperative programming is a programming paradigm that uses statements that change a program's state. In much the same way that the imperative mood in natural languages expresses commands, an imperative program consists of commands for the computer to perform. Imperative programming focuses on describing how a program operates."}),Object(s.jsx)("p",{children:"The term is often used in contrast to declarative programming, which focuses on what the program should accomplish without specifying all the details of how the program should achieve the result."})]})}},{id:Object(f.a)(),title:"Declarative programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Declarative_programming"),anchor:"Declarative_programming",text:{p1:Object(s.jsx)("p",{children:"In computer science, declarative programming is a programming paradigm\u2014a style of building the structure and elements of computer programs\u2014that expresses the logic of a computation without describing its control flow. This is in contrast with imperative programming, which implements algorithms in explicit steps."})}},{id:Object(f.a)(),title:"Language primitive",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Language_primitive"),anchor:"Language_primitive",text:{p1:Object(s.jsx)("p",{children:"In computing, language primitives are the simplest elements available in a programming language. A primitive is the smallest 'unit of processing' available to a programmer of a given machine, or can be an atomic element of an expression in a language."})}},{id:Object(f.a)(),title:"Event-driven programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Event-driven_programming"),anchor:"Event-driven_programming",text:{p1:Object(s.jsx)("p",{children:"In computer programming, event-driven programming is a programming paradigm in which the flow of the program is determined by events such as user actions (mouse clicks, key presses), sensor outputs, or message passing from other programs or threads. Event-driven programming is the dominant paradigm used in graphical user interfaces and other applications (e.g., JavaScript web applications) that are centered on performing certain actions in response to user input. This is also true of programming for device drivers (e.g., P in USB device driver stacks)."})}},{id:Object(f.a)(),title:"Event loop",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Event_loop"),anchor:"Event_loop",text:{p1:Object(s.jsx)("p",{children:'In computer science, the event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program. The event loop works by making a request to some internal or external "event provider" (that generally blocks the request until an event has arrived), then calls the relevant event handler ("dispatches the event"). The event loop is also sometimes referred to as the message dispatcher, message loop, message pump, or run loop.'})}},{id:Object(f.a)(),title:"Blocking (computing)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Blocking_(computing)"),anchor:"Blocking_(computing)",text:{p1:Object(s.jsx)("p",{children:"In computing, a process is an instance of a computer program that is being executed. A process always exists in exactly one process state. A process that is blocked is one that is waiting for some event, such as a resource becoming available or the completion of an I/O operation."})}},{id:Object(f.a)(),title:"Process",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Process_(computing)"),anchor:"Process",text:{p1:Object(s.jsx)("p",{children:"In computing, a process is the instance of a computer program that is being executed by one or many threads. It contains the program code and its activity. Depending on the operating system (OS), a process may be made up of multiple threads of execution that execute instructions concurrently."})}},{id:Object(f.a)(),title:"Instance",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Instance_(computer_science)"),anchor:"Instance",text:{p1:Object(s.jsx)("p",{children:"In a computer system, any time a new context is created based on some model, it is said that the model has been instantiated. In practice, this instance usually has a data structure in common with other instances, but the values stored in the instances are separate. Changing the values in one instance will then not interfere with the values of some other instance. A compute instance can be software or hardware which can run code, for example a CPU, GPU or a virtual machine."})}},{id:Object(f.a)(),title:"Event",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Event_(computing)"),anchor:"Event",text:{p1:Object(s.jsx)("p",{children:"In programming and software design, an event is an action or occurrence recognized by software, often originating asynchronously from the external environment, that may be handled by the software. Computer events can be generated or triggered by the system, by the user, or in other ways. Typically, events are handled synchronously with the program flow; that is, the software may have one or more dedicated places where events are handled, frequently an event loop."})}},{id:Object(f.a)(),title:"Dynamic programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Dynamic_programming"),anchor:"Dynamic_programming",text:{p1:Object(s.jsx)("p",{children:"Dynamic programming is both a mathematical optimization method and a computer programming method."})}},{id:Object(f.a)(),title:"Closure",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Closure_(computer_programming)"),anchor:"Closure",text:{p1:Object(s.jsx)("p",{children:"In programming languages, a closure, also lexical closure or function closure, is a technique for implementing lexically scoped name binding in a language with first-class functions. Operationally, a closure is a record storing a function together with an environment. The environment is a mapping associating each free variable of the function (variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created. Unlike a plain function, a closure allows the function to access those captured variables through the closure's copies of their values or references, even when the function is invoked outside their scope."})}},{id:Object(f.a)(),title:"Callback",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Callback_(computer_programming)"),anchor:"Callback",text:{p1:Object(s.jsx)("p",{children:'In computer programming, a callback, also known as a "call-after" function, is any executable code that is passed as an argument to other code; that other code is expected to call back (execute) the argument at a given time. This execution may be immediate as in a synchronous callback, or it might happen at a later point in time as in an asynchronous callback. Programming languages support callbacks in different ways, often implementing them with subroutines, lambda expressions, blocks, or function pointers.'})}},{id:Object(f.a)(),title:"Computer architecture",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Computer_architecture"),anchor:"Computer_architecture",text:{p1:Object(s.jsx)("p",{children:"In computer engineering, computer architecture is a set of rules and methods that describe the functionality, organization, and implementation of computer systems. The architecture of a system refers to its structure in terms of separately specified components of that system and their interrelationships."})}},{id:Object(f.a)(),title:"Lexical analysis",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Lexical_analysis"),anchor:"Lexical_analysis",text:{p1:Object(s.jsx)("p",{children:"In computer science, lexical analysis, lexing or tokenization is the process of converting a sequence of characters (such as in a computer program or web page) into a sequence of tokens (strings with an assigned and thus identified meaning). A program that performs lexical analysis may be termed a lexer, tokenizer, or scanner, although scanner is also a term for the first stage of a lexer. A lexer is generally combined with a parser, which together analyze the syntax of programming languages, web pages, and so forth."})}},{id:Object(f.a)(),title:"Data type",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Data_type"),anchor:"Data_type",text:{p1:Object(s.jsx)("p",{children:"In computer science and computer programming, a data type or simply type is an attribute of data which tells the compiler or interpreter how the programmer intends to use the data. Most programming languages support basic data types of integer numbers (of varying sizes), floating-point numbers (which approximate real numbers), characters and Booleans. A data type constrains the values that an expression, such as a variable or a function, might take. This data type defines the operations that can be done on the data, the meaning of the data, and the way values of that type can be stored. A data type provides a set of values from which an expression (i.e. variable, function, etc.) may take its values."})}},{id:Object(f.a)(),title:"Type system",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Type_system"),anchor:"Type_system",text:{p1:Object(s.jsx)("p",{children:"In programming languages, a type system is a logical system comprising a set of rules that assigns a property called a type to the various constructs of a computer program, such as variables, expressions, functions or modules."})}},{id:Object(f.a)(),title:"Class",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Class_(computer_programming)"),anchor:"class",text:{p1:Object(s.jsx)("p",{children:"In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods)."})}},{id:Object(f.a)(),title:"Polymorphism",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Polymorphism_(computer_science)"),anchor:"Polymorphism",text:{p1:Object(s.jsx)("p",{children:"In programming languages and type theory, polymorphism is the provision of a single interface to entities of different types or the use of a single symbol to represent multiple different types.The concept is borrowed from a principle in biology where an organism or species can have many different forms or stages."})}},{id:Object(f.a)(),title:"Protocol",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Protocol_(object-oriented_programming)"),anchor:"Protocol",text:{p1:Object(s.jsx)("p",{children:"Protocol is a term used by particular object-oriented programming languages with a variety of specific meanings, which other languages may term interface or trait."})}},{id:Object(f.a)(),title:"Interface",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Interface_(computing)"),anchor:"Interface",text:{p1:Object(s.jsx)("p",{children:"In computing, an interface is a shared boundary across which two or more separate components of a computer system exchange information. The exchange can be between software, computer hardware, peripheral devices, humans, and combinations of these. Some computer hardware devices, such as a touchscreen, can both send and receive data through the interface, while others such as a mouse or microphone may only provide an interface to send data to a given system."})}},{id:Object(f.a)(),title:"API",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/API"),anchor:"API",text:{p1:Object(s.jsx)("p",{children:"An application programming interface (API) is a connection between computers or between computer programs. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation."})}},{id:Object(f.a)(),title:"Literal",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Literal_(computer_programming)"),anchor:"Literal",text:{p1:Object(s.jsx)("p",{children:"In computer science, a literal is a notation for representing a fixed value in source code. Almost all programming languages have notations for atomic values such as integers, floating-point numbers, and strings, and usually for booleans and characters; some also have notations for elements of enumerated types and compound values such as arrays, records, and objects. An anonymous function is a literal for the function type."})}},{id:Object(f.a)(),title:"Value",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Value_(computer_science)"),anchor:"Value",text:{p1:Object(s.jsx)("p",{children:"In computer science, a value is the representation of some entity that can be manipulated by a program. The members of a type are the values of that type."})}},{id:Object(f.a)(),title:"Syntax",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Syntax_(programming_languages)"),anchor:"Syntax",text:{p1:Object(s.jsx)("p",{children:"In computer science, the syntax of a computer language is the set of rules that defines the combinations of symbols that are considered to be correctly structured statements or expressions in that language. This applies both to programming languages, where the document represents source code, and to markup languages, where the document represents data."})}},{id:Object(f.a)(),title:"Member variable",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Member_variable"),anchor:"Member_variable",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"In object-oriented programming, a member variable (sometimes called a member field) is a variable that is associated with a specific object, and accessible for all its methods (member functions)."}),Object(s.jsx)("p",{children:"In class-based programming languages, these are distinguished into two types: class variables (also called static member variables), where only one copy of the variable is shared with all instances of the class; and instance variables, where each instance of the class has its own independent copy of the variable."})]})}},{id:Object(f.a)(),title:"Data hierarchy",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Data_hierarchy"),anchor:"Data_hierarchy",text:{p1:Object(s.jsx)("p",{children:"Data hierarchy refers to the systematic organization of data, often in a hierarchical form. Data organization involves characters, fields, records, files and so on. This concept is a starting point when trying to see what makes up data and whether data has a structure."})}},{id:Object(f.a)(),title:"Software design",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Software_design"),anchor:"Software_design",text:{p1:Object(s.jsx)("p",{children:'Software design is the process by which an agent creates a specification of a software artifact intended to accomplish goals, using a set of primitive components and subject to constraints. Software design may refer to either "all the activity involved in conceptualizing, framing, implementing, commissioning, and ultimately modifying complex systems" or "the activity following requirements specification and before programming, as ... [in] a stylized software engineering process."'})}},{id:Object(f.a)(),title:"Software design pattern",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Software_design_pattern"),anchor:"Software_design_pattern",text:{p1:Object(s.jsx)("p",{children:"In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. Rather, it is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system."})}},{id:Object(f.a)(),title:"Reusability",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Reusability"),anchor:"Reusability",text:{p1:Object(s.jsx)("p",{children:"In computer science and software engineering, reusability is the use of existing assets in some form within the software product development process; these assets are products and by-products of the software development life cycle and include code, software components, test suites, designs and documentation. The opposite concept of reusability is leverage, which modifies existing assets as needed to meet specific system requirements. Because reuse implies the creation of a separately maintained version of the assets[clarification needed], it is preferred over leverage."})}},{id:Object(f.a)(),title:"Functional programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Functional_programming"),anchor:"Functional_programming",text:{p1:Object(s.jsx)("p",{children:"In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions. It is a declarative programming paradigm in which function definitions are trees of expressions that map values to other values, rather than a sequence of imperative statements which update the running state of the program."})}},{id:Object(f.a)(),title:"Function composition",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Function_composition_(computer_science)"),anchor:"Function_composition",text:{p1:Object(s.jsx)("p",{children:"In computer science, function composition is an act or mechanism to combine simple functions to build more complicated ones. Like the usual composition of functions in mathematics, the result of each function is passed as the argument of the next, and the result of the last one is the result of the whole."})}},{id:Object(f.a)(),title:"Object composition",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Object_composition"),anchor:"Object_composition",text:{p1:Object(s.jsx)("p",{children:"In computer science, object composition is a way to combine objects or data types into more complex ones. Common kinds of compositions are objects used in object-oriented programming, tagged unions, sets, sequences, and various graph structures. Object compositions relate to, but are not the same as, data structures."})}},{id:Object(f.a)(),title:"Decomposition",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Decomposition_(computer_science)"),anchor:"Decomposition",text:{p1:Object(s.jsx)("p",{children:"Decomposition in computer science, also known as factoring, is breaking a complex problem or system into parts that are easier to conceive, understand, program, and maintain."})}},{id:Object(f.a)(),title:"Generic programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Generic_programming"),anchor:"Generic_programming",text:{p1:Object(s.jsx)("p",{children:"Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters."})}},{id:Object(f.a)(),title:"High-level programming language",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/High-level_programming_language"),anchor:"High-level_programming_language",text:{p1:Object(s.jsx)("p",{children:'In computer science, a high-level programming language is a programming language with strong abstraction from the details of the computer. In contrast to low-level programming languages, it may use natural language elements, be easier to use, or may automate (or even hide entirely) significant areas of computing systems (e.g. memory management), making the process of developing a program simpler and more understandable than when using a lower-level language. The amount of abstraction provided defines how "high-level" a programming language is.'})}},{id:Object(f.a)(),title:"Computer science",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Computer_science"),anchor:"Computer_science",text:{p1:Object(s.jsx)("p",{children:"Computer science is the study of computation, automation, and information. Computer science spans theoretical disciplines, such as algorithms, theory of computation, and information theory, to practical disciplines including the design and implementation of hardware and software. Computer science is generally considered an area of academic research and distinct from computer programming."})}},{id:Object(f.a)(),title:"Control flow analysis",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Control_flow_analysis"),anchor:"Control_flow_analysis",text:{p1:Object(s.jsx)("p",{children:"In computer science, control-flow analysis (CFA) is a static-code-analysis technique for determining the control flow of a program. The control flow is expressed as a control-flow graph (CFG). For both functional programming languages and object-oriented programming languages, the term CFA, and elaborations such as k-CFA, refer to specific algorithms that compute control flow."})}},{id:Object(f.a)(),title:"Static program analysis",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Static_program_analysis"),anchor:"Static_program_analysis",text:{p1:Object(s.jsx)("p",{children:"Static program analysis is the analysis of computer software performed without executing any programs, in contrast with dynamic analysis, which is performed on programs during their execution."})}},{id:Object(f.a)(),title:"Program analysis",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Program_analysis"),anchor:"Program_analysis",text:{p1:Object(s.jsx)("p",{children:"In computer science, program analysis is the process of automatically analyzing the behavior of computer programs regarding a property such as correctness, robustness, safety and liveness. Program analysis focuses on two major areas: program optimization and program correctness. The first focuses on improving the program's performance while reducing the resource usage while the latter focuses on ensuring that the program does what it is supposed to do."})}},{id:Object(f.a)(),title:"Control-flow diagram",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Control-flow_diagram"),anchor:"Control-flow_diagram",text:{p1:Object(s.jsx)("p",{children:"A control-flow diagram (CFD) is a diagram to describe the control flow of a business process, process or review."})}},{id:Object(f.a)(),title:"Data-flow analysis",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Data-flow_analysis"),anchor:"Data-flow_analysis",text:{p1:Object(s.jsx)("p",{children:"Data-flow analysis is a technique for gathering information about the possible set of values calculated at various points in a computer program. A program's control-flow graph (CFG) is used to determine those parts of a program to which a particular value assigned to a variable might propagate. The information gathered is often used by compilers when optimizing a program. A canonical example of a data-flow analysis is reaching definitions."})}},{id:Object(f.a)(),title:"Data-flow diagram",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Data-flow_diagram"),anchor:"Data-flow_diagram",text:{p1:Object(s.jsx)("p",{children:"A data-flow diagram is a way of representing a flow of data through a process or a system (usually an information system). The DFD also provides information about the outputs and inputs of each entity and the process itself. A data-flow diagram has no control flow - there are no decision rules and no loops. Specific operations based on the data can be represented by a flowchart."})}},{id:Object(f.a)(),title:"Control-flow graph",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Control-flow_graph"),anchor:"Control-flow_graph",text:{p1:Object(s.jsx)("p",{children:"In computer science, a control-flow graph (CFG) is a representation, using graph notation, of all paths that might be traversed through a program during its execution."})}},{id:Object(f.a)(),title:"Execution",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Execution_(computing)"),anchor:"Execution",text:{p1:Object(s.jsx)("p",{children:"Execution in computer and software engineering is the process by which a computer or virtual machine reads and acts on the instructions of a computer program. Each instruction of a program is a description of a particular action which must be carried out, in order for a specific problem to be solved. Execution involves repeatedly following a 'fetch-decode-execute' cycle for each instruction. As the executing machine follows the instructions, specific effects are produced in accordance with the semantics of those instructions."})}},{id:Object(f.a)(),title:"Batch processing",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Batch_processing"),anchor:"Batch_processing",text:{p1:Object(s.jsx)("p",{children:'Computerized batch processing is the running of "jobs that can run without end user interaction, or can be scheduled to run as resources permit."'})}},{id:Object(f.a)(),title:"Abstract data type",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Abstract_data_type"),anchor:"Abstract_data_type",text:{p1:Object(s.jsx)("p",{children:"In computer science, an abstract data type (ADT) is a mathematical model for data types. An abstract data type is defined by its behavior (semantics) from the point of view of a user, of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations. This mathematical model contrasts with data structures, which are concrete representations of data, and are the point of view of an implementer, not a user."})}},{id:Object(f.a)(),title:"Queue (abstract data type)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Queue_(abstract_data_type)"),anchor:"Queue",text:{p1:Object(s.jsx)("p",{children:"In computer science, a queue is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence. By convention, the end of the sequence at which elements are added is called the back, tail, or rear of the queue, and the end at which elements are removed is called the head or front of the queue, analogously to the words used when people line up to wait for goods or services."})}},{id:Object(f.a)(),title:"Separation of concerns",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Separation_of_concerns"),anchor:"Separation_of_concerns",text:{p1:Object(s.jsx)("p",{children:'In computer science, separation of concerns (SoC) is a design principle for separating a computer program into distinct sections. Each section addresses a separate concern, a set of information that affects the code of a computer program. A concern can be as general as "the details of the hardware for an application", or as specific as "the name of which class to instantiate". A program that embodies SoC well is called a modular program. Modularity, and hence separation of concerns, is achieved by encapsulating information inside a section of code that has a well-defined interface. Encapsulation is a means of information hiding. Layered designs in information systems are another embodiment of separation of concerns (e.g., presentation layer, business logic layer, data access layer, persistence layer).'})}},{id:Object(f.a)(),title:"Software engineering",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Software_engineering"),anchor:"Software_engineering",text:{p1:Object(s.jsx)("p",{children:"Software engineering is an engineering approach on a software development of systematics application. A software engineer is a person who applies the principles of software engineering to design, develop, maintain, test, and evaluate computer software. The term programmer is sometimes used as a synonym, but may also lack connotations of engineering education or skills."})}},{id:Object(f.a)(),title:"Software",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Software"),anchor:"Software",text:{p1:Object(s.jsx)("p",{children:"Software is a collection of instructions that tell a computer how to work. This is in contrast to hardware, from which the system is built and actually performs the work."})}},{id:Object(f.a)(),title:"Business logic",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Business_logic"),anchor:"Business_logic",text:{p1:Object(s.jsx)("p",{children:"In computer software, business logic or domain logic is the part of the program that encodes the real-world business rules that determine how data can be created, stored, and changed. It is contrasted with the remainder of the software that might be concerned with lower-level details of managing a database or displaying the user interface, system infrastructure, or generally connecting various parts of the program."})}},{id:Object(f.a)(),title:"Create, read, update and delete",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Create,_read,_update_and_delete"),anchor:"Create,_read,_update_and_delete",text:{p1:Object(s.jsx)("p",{children:"In computer programming, create, read, update, and delete (CRUD) are the four basic operations of persistent storage. CRUD is also sometimes used to describe user interface conventions that facilitate viewing, searching, and changing information using computer-based forms and reports."})}},{id:Object(f.a)(),title:"Server (computing)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Server_(computing)"),anchor:"Server_(computing)",text:{p1:Object(s.jsx)("p",{children:'In computing, a server is a piece of computer hardware or software (computer program) that provides functionality for other programs or devices, called "clients". This architecture is called the client-server model. Servers can provide various functionalities, often called "services", such as sharing data or resources among multiple clients, or performing computation for a client. A single server can serve multiple clients, and a single client can use multiple servers. A client process may run on the same device or may connect over a network to a server on a different device. Typical servers are database servers, file servers, mail servers, print servers, web servers, game servers, and application servers.'})}},{id:Object(f.a)(),title:"Computer file",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Computer_file"),anchor:"Computer_file",text:{p1:Object(s.jsx)("p",{children:"A computer file is a computer resource for recording data in a computer storage device, primarily identified by its file name. Just as words can be written to paper, so can data be written to a computer file. Files can be edited and transferred through the Internet on that particular computer system."})}},{id:Object(f.a)(),title:"Pointer (computer programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Pointer_(computer_programming)"),anchor:"Pointer_(computer_programming)",text:{p1:Object(s.jsx)("p",{children:"In computer science, a pointer is an object in many programming languages that stores a memory address. This can be that of another value located in computer memory, or in some cases, that of memory-mapped computer hardware. A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer. As an analogy, a page number in a book's index could be considered a pointer to the corresponding page; dereferencing such a pointer would be done by flipping to the page with the given page number and reading the text found on that page. The actual format and content of a pointer variable is dependent on the underlying computer architecture."})}},{id:Object(f.a)(),title:"Higher-order function",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Higher-order_function"),anchor:"Higher-order_function",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"In mathematics and computer science, a higher-order function is a function that does at least one of the following:"}),Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:"takes one or more functions as arguments (i.e. a procedural parameter, which is a parameter of a procedure that is itself a procedure),"}),Object(s.jsx)("li",{children:"returns a function as its result."})]})]})}},{id:Object(f.a)(),title:"Parameter (computer programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Parameter_(computer_programming)"),anchor:"Parameter_(computer_programming)",text:{p1:Object(s.jsx)("p",{children:"In computer programming, a parameter or a formal argument is a special kind of variable used in a subroutine to refer to one of the pieces of data provided as input to the subroutine. These pieces of data are the values of the arguments (often called actual arguments or actual parameters) with which the subroutine is going to be called/invoked. An ordered list of parameters is usually included in the definition of a subroutine, so that, each time the subroutine is called, its arguments for that call are evaluated, and the resulting values can be assigned to the corresponding parameters."})}},{id:Object(f.a)(),title:"Programming language",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Programming_language"),anchor:"Programming_language",text:{p1:Object(s.jsx)("p",{children:"A programming language is any set of rules that converts strings, or graphical program elements in the case of visual programming languages, to various kinds of machine code output. Programming languages are one kind of computer language, and are used in computer programming to implement algorithms."})}},{id:Object(f.a)(),title:"Record (computer science)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Record_(computer_science)"),anchor:"Record_(computer_science)",text:{p1:Object(s.jsx)("p",{children:'In computer science, a record (also called a structure, struct, or compound data) is a basic data structure. Records in a database or spreadsheet are usually called "rows". A record is a collection of fields, possibly of different data types, typically in a fixed number and sequence. The fields of a record may also be called members, particularly in object-oriented programming; fields may also be called elements, though this risks confusion with the elements of a collection.'})}},{id:Object(f.a)(),title:"Cohesion (computer science)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Cohesion_(computer_science)"),anchor:"Cohesion_(computer_science)",text:{p1:Object(s.jsx)("p",{children:"In computer programming, cohesion refers to the degree to which the elements inside a module belong together. In one sense, it is a measure of the strength of relationship between the methods and data of a class and some unifying purpose or concept served by that class. In another sense, it is a measure of the strength of relationship between the class's methods and data themselves."})}},{id:Object(f.a)(),title:"Language construct",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Language_construct"),anchor:"Language_construct",text:{p1:Object(s.jsx)("p",{children:'A language construct is a syntactically allowable part of a program that may be formed from one or more lexical tokens in accordance with the rules of a programming language. The term "language construct" is often used as a synonym for control structure. Control flow statements (such as conditionals, foreach loops, while loops, etc) are language constructs, not functions. So while (true) is a language construct, while add(10) is a function call.'})}},{id:Object(f.a)(),title:"this (computer programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/This_(computer_programming)"),anchor:"this_(computer_programming)",text:{p1:Object(s.jsx)("p",{children:'this, self, and Me are keywords used in some computer programming languages to refer to the object, class, or other entity of which the currently running code is a part. The entity referred to by these keywords thus depends on the execution context (such as which object is having its method called). Different programming languages use these keywords in slightly different ways. In languages where a keyword like "this" is mandatory, the keyword is the only way to access data and methods stored in the current object. Where optional, they can disambiguate variables and functions with the same name.'})}},{id:Object(f.a)(),title:"Value type and reference type",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Value_type_and_reference_type"),anchor:"Value_type_and_reference_type",text:{p1:Object(s.jsx)("p",{children:"In computer programming, data types can be divided into two categories: value types and reference types. A value of value type is the actual value. A value of reference type is a reference to another value."})}},{id:Object(f.a)(),title:"Primitive data type",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Primitive_data_type"),anchor:"Primitive_data_type",text:{p1:Object(s.jsx)("p",{children:'In computer science, primitive data types are a set of basic data types from which all other data types are constructed. Specifically it often refers to the limited set of data representations in use by a particular processor, which all compiled programs must use. Most processors support a similar set of primitive data types, although the specific representations vary. More generally "primitive data types" may refer to the standard data types built into a programming language. Data types which are not primitive are referred to as derived or composite data types. Primitive types are almost always value types, but composite types may also be value types.'})}},{id:Object(f.a)(),title:"Composite data type",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Composite_data_type"),anchor:"Composite_data_type",text:{p1:Object(s.jsx)("p",{children:"In computer science, a composite data type or compound data type is any data type which can be constructed in a program using the programming language's primitive data types and other composite types. It is sometimes called a structure or aggregate data type, although the latter term may also refer to arrays, lists, etc. The act of constructing a composite type is known as composition. Composite data types are often contrasted with scalar variables."})}},{id:Object(f.a)(),title:"Message passing",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Message_passing"),anchor:"Message_passing",text:{p1:Object(s.jsx)("p",{children:"In computer science, message passing is a technique for invoking behavior (i.e., running a program) on a computer. The invoking program sends a message to a process (which may be an actor or object) and relies on that process and its supporting infrastructure to then select and run some appropriate code. Message passing differs from conventional programming where a process, subroutine, or function is directly invoked by name. Message passing is key to some models of concurrency and object-oriented programming."})}},{id:Object(f.a)(),title:"Serialization",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Serialization"),anchor:"Serialization",text:{p1:Object(s.jsx)("p",{children:"In computing, serialization (US spelling) or serialisation (UK spelling) is the process of translating a data structure or object state into a format that can be stored (for example, in a file or memory data buffer) or transmitted (for example, over a computer network) and reconstructed later (possibly in a different computer environment). When the resulting series of bits is reread according to the serialization format, it can be used to create a semantically identical clone of the original object. For many complex objects, such as those that make extensive use of references, this process is not straightforward. Serialization of object-oriented objects does not include any of their associated methods with which they were previously linked. This process of serializing an object is also called marshalling an object in some situations. The opposite operation, extracting a data structure from a series of bytes, is deserialization, (also called unserialization or unmarshalling)."})}},{id:Object(f.a)(),title:"Object copying",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Object_copying"),anchor:"Object_copying",text:{p1:Object(s.jsx)("p",{children:"In object-oriented programming, object copying is creating a copy of an existing object, a unit of data in object-oriented programming. The resulting object is called an object copy or simply copy of the original object. Copying is basic but has subtleties and can have significant overhead. There are several ways to copy an object, most commonly by a copy constructor or cloning. Copying is done mostly so the copy can be modified or moved, or the current value preserved. If either of these is unneeded, a reference to the original data is sufficient and more efficient, as no copying occurs."})}},{id:Object(f.a)(),title:"Node (computer science)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Node_(computer_science)"),anchor:"Node_(computer_science)",text:{p1:Object(s.jsx)("p",{children:"A node is a basic unit of a data structure, such as a linked list or tree data structure. Nodes contain data and also may link to other nodes. Links between nodes are often implemented by pointers."})}},{id:Object(f.a)(),title:"Iteration",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Iteration"),anchor:"Iteration",text:{p1:Object(s.jsx)("p",{children:"Iteration is the repetition of a process in order to generate a (possibly unbounded) sequence of outcomes. Each repetition of the process is a single iteration, and the outcome of each iteration is then the starting point of the next iteration. In mathematics and computer science, iteration (along with the related technique of recursion) is a standard element of algorithms."})}},{id:Object(f.a)(),title:"List (abstract data type)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/List_(abstract_data_type)"),anchor:"List_(abstract_data_type)",text:{p1:Object(s.jsx)("p",{children:"In computer science, a list or sequence is an abstract data type that represents a finite number of ordered values, where the same value may occur more than once. An instance of a list is a computer representation of the mathematical concept of a tuple or finite sequence; the (potentially) infinite analog of a list is a stream. Lists are a basic example of containers, as they contain other values. If the same value occurs multiple times, each occurrence is considered a distinct item."})}},{id:Object(f.a)(),title:"Iterator",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Iterator"),anchor:"Iterator",text:{p1:Object(s.jsx)("p",{children:"In computer programming, an iterator is an object that enables a programmer to traverse a container, particularly lists. Various types of iterators are often provided via a container's interface. Though the interface and semantics of a given iterator are fixed, iterators are often implemented in terms of the structures underlying a container implementation and are often tightly coupled to the container to enable the operational semantics of the iterator. An iterator performs traversal and also gives access to data elements in a container, but does not itself perform iteration (i.e., not without some significant liberty taken with that concept or with trivial use of the terminology)"})}},{id:Object(f.a)(),title:"Context (computing)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Context_(computing)"),anchor:"Context_(computing)",text:{p1:Object(s.jsx)("p",{children:"In computer science, a task context is the minimal set of data used by a task (which may be a process, thread, or fiber) that must be saved to allow a task to be interrupted, and later continued from the same point. The concept of context assumes significance in the case of interruptible tasks, wherein, upon being interrupted, the processor saves the context and proceeds to serve the interrupt service routine. Thus, the smaller the context is, the smaller the latency is."})}},{id:Object(f.a)(),title:"Call stack",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Call_stack"),anchor:"Call_stack",text:{p1:Object(s.jsx)("p",{children:'In computer science, a call stack is a stack data structure that stores information about the active subroutines of a computer program. This kind of stack is also known as an execution stack, program stack, control stack, run-time stack, or machine stack, and is often shortened to just "the stack". Although maintenance of the call stack is important for the proper functioning of most software, the details are normally hidden and automatic in high-level programming languages. Many computer instruction sets provide special instructions for manipulating stacks.'})}},{id:Object(f.a)(),title:"Memory management",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Memory_management"),anchor:"Memory_management",text:{p1:Object(s.jsx)("p",{children:"Memory management is a form of resource management applied to computer memory. The essential requirement of memory management is to provide ways to dynamically allocate portions of memory to programs at their request, and free it for reuse when no longer needed. This is critical to any advanced computer system where more than a single process might be underway at any time."})}},{id:Object(f.a)(),title:"Evaluation strategy",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Evaluation_strategy"),anchor:"Evaluation_strategy",text:{p1:Object(s.jsx)("p",{children:"In a programming language, an evaluation strategy is a set of rules for evaluating expressions. The term is often used to refer to the more specific notion of a parameter-passing strategy that defines the kind of value that is passed to the function for each parameter (the binding strategy), whether to evaluate the parameters of a function call, and if so in what order (the evaluation order). The notion of reduction strategy is distinct, although some authors conflate the two terms and the definition of each term is not widely agreed upon."})}},{id:Object(f.a)(),title:"Local variable",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Local_variable"),anchor:"Local_variable",text:{p1:Object(s.jsx)("p",{children:"In computer science, a local variable is a variable that is given local scope. Local variable references in the function or block in which it is declared override the same variable name in the larger scope. In programming languages with only two levels of visibility, local variables are contrasted with global variables. On the other hand, many ALGOL-derived languages allow any number of nested levels of visibility, with private variables, functions, constants and types hidden within them, either by nested blocks or nested functions. Local variables are fundamental to procedural programming, and more generally modular programming: variables of local scope are used to avoid issues with side-effects that can occur with global variables."})}},{id:Object(f.a)(),title:"Global variable",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Global_variable"),anchor:"Global_variable",text:{p1:Object(s.jsx)("p",{children:"In computer programming, a global variable is a variable with global scope, meaning that it is visible (hence accessible) throughout the program, unless shadowed. The set of all global variables is known as the global environment or global state. In compiled languages, global variables are generally static variables, whose extent (lifetime) is the entire runtime of the program, though in interpreted languages (including command-line interpreters), global variables are generally dynamically allocated when declared, since they are not known ahead of time."})}},{id:Object(f.a)(),title:"Static variable",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Static_variable"),anchor:"Static_variable",text:{p1:Object(s.jsx)("p",{children:'In computer programming, a static variable is a variable that has been allocated "statically", meaning that its lifetime (or "extent") is the entire run of the program. This is in contrast to shorter-lived automatic variables, whose storage is stack allocated and deallocated on the call stack; and in contrast to objects, whose storage is dynamically allocated and deallocated in heap memory.'})}},{id:Object(f.a)(),title:"Stack-based memory allocation",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Stack-based_memory_allocation"),anchor:"Stack-based_memory_allocation",text:{p1:Object(s.jsx)("p",{children:"Stacks in computing architectures are regions of memory where data is added or removed in a last-in-first-out (LIFO) manner."})}},{id:Object(f.a)(),title:"Method (computer programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Method_(computer_programming)"),anchor:"Method_(computer_programming)",text:{p1:Object(s.jsx)("p",{children:"A method in object-oriented programming (OOP) is a procedure associated with a message and an object. An object consists of data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state (whether it is open or closed at any given point in time) would be a property."})}},{id:Object(f.a)(),title:"Property (programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Property_(programming)"),anchor:"Property_(programming)",text:{p1:Object(s.jsx)("p",{children:"A property, in some object-oriented programming languages, is a special sort of class member, intermediate in functionality between a field (or data member) and a method or a property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. The syntax for reading and writing of properties is like for fields, but property reads and writes are (usually) translated to 'getter' and 'setter' method calls. The field-like syntax is easier to read and write than many method calls[citation needed], yet the interposition of method calls \"under the hood\" allows for data validation, active updating (e.g., of GUI elements), or implementation of what may be called \"read-only fields\"."})}},{id:Object(f.a)(),title:"Class variable",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Class_variable"),anchor:"Class_variable",text:{p1:Object(s.jsx)("p",{children:'In object-oriented programming with classes, a class variable is any variable declared with the `static` modifier of which a single copy exists, regardless of how many instances of the class exist. Note that in Java, the terms "field" and "variable" are used interchangeably for member variable.'})}},{id:Object(f.a)(),title:"Instance variable",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Instance_variable"),anchor:"Instance_variable",text:{p1:Object(s.jsx)("p",{children:"In object-oriented programming with classes, an instance variable is a variable defined in a class (i.e. a member variable), for which each instantiated object of the class has a separate copy, or instance. An instance variable has similarities with a class variable, but is non-static. An instance variable is a variable which is declared in a class but outside of constructors, methods, or blocks. Instance variables are created when an object is instantiated, and are accessible to all the constructors, methods, or blocks in the class. Access modifiers can be given to the instance variable."})}},{id:Object(f.a)(),title:"Constructor (object-oriented programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Constructor_(object-oriented_programming)"),anchor:"Constructor_(object-oriented_programming)",text:{p1:Object(s.jsx)("p",{children:"In class-based object-oriented programming, a constructor is a special type of subroutine called to create an object. It prepares the new object for use, often accepting arguments that the constructor uses to set required member variables."})}},{id:Object(f.a)(),title:"Nested function",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Nested_function"),anchor:"Nested_function",text:{p1:Object(s.jsx)("p",{children:"In computer programming, a nested function (or nested procedure or subroutine) is a function which is defined within another function, the enclosing function. Due to simple recursive scope rules, a nested function is itself invisible outside of its immediately enclosing function, but can see (access) all local objects (data, functions, types, etc.) of its immediately enclosing function as well as of any function(s) which, in turn, encloses that function. The nesting is theoretically possible to unlimited depth, although only a few levels are normally used in practical programs."})}},{id:Object(f.a)(),title:"Model-view-viewmodel",isLargerTitle:!1,path:"/cs",url:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",anchor:"mvvm",text:{p1:Object(s.jsx)("p",{children:"Model-view-viewmodel (MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) - be it via a markup language or GUI code \u2013 from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The viewmodel of MVVM is a value converter, meaning the viewmodel is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect, the viewmodel is more model than view, and handles most if not all of the view's display logic. The viewmodel may implement a mediator pattern, organizing access to the back-end logic around the set of use cases supported by the view."})}},{id:Object(f.a)(),title:"Encapsulation (computer programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Encapsulation_(computer_programming)"),anchor:"Encapsulation",text:{p1:Object(s.jsx)("p",{children:"In object-oriented programming (OOP), encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components. Encapsulation is used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by the methods."})}},{id:Object(f.a)(),title:"Inheritance (object-oriented programming)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Inheritance_(object-oriented_programming)"),anchor:"Inheritance",text:{p1:Object(s.jsx)("p",{children:"In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object (prototype-based inheritance) or class (class-based inheritance), retaining similar implementation. Also defined as deriving new classes (sub classes) from existing ones such as super class or base class and then forming them into a hierarchy of classes."})}},{id:Object(f.a)(),title:"Logic gate",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Logic_gate"),anchor:"Logic_gate",text:{p1:Object(s.jsx)("p",{children:"A logic gate is an idealized model of computation or a physical electronic device implementing a Boolean function, a logical operation performed on one or more binary inputs that produces a single binary output. Depending on the context, the term may refer to an ideal logic gate, one that has for instance zero rise time and unlimited fan-out, or it may refer to a non-ideal physical device(see Ideal and real op-amps for comparison)."})}},{id:Object(f.a)(),title:"Branch (computer science)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Branch_(computer_science)"),anchor:"Branch_(computer_science)",text:{p1:Object(s.jsx)("p",{children:"A branch is an instruction in a computer program that can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order. Branch (or branching, branched) may also refer to the act of switching execution to a different instruction sequence as a result of executing a branch instruction. Branch instructions are used to implement control flow in program loops and conditionals (i.e., executing a particular sequence of instructions only if certain conditions are satisfied)."})}},{id:Object(f.a)(),title:"Dataflow programming",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Dataflow_programming"),anchor:"Dataflow_programming",text:{p1:Object(s.jsx)("p",{children:"In computer programming, dataflow programming is a programming paradigm that models a program as a directed graph of the data flowing between operations, thus implementing dataflow principles and architecture. Dataflow programming languages share some features of functional languages, and were generally developed in order to bring some functional concepts to a language more suitable for numeric processing. Some authors use the term datastream instead of dataflow to avoid confusion with dataflow computing or dataflow architecture, based on an indeterministic machine paradigm."})}},{id:Object(f.a)(),title:"Computer memory",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Computer_memory"),anchor:"Computer_memory",text:{p1:Object(s.jsx)("p",{children:"In computing, memory is a device or system that is used to store information for immediate use in a computer or related computer hardware and digital electronic devices. The term memory is often synonymous with the term primary storage or main memory. An archaic synonym for memory is store."})}},{id:Object(f.a)(),title:"Object lifetime",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Object_lifetime"),anchor:"Object_lifetime",text:{p1:Object(s.jsx)("p",{children:"In object-oriented programming (OOP), the object lifetime (or life cycle) of an object is the time between an object's creation and its destruction. Rules for object lifetime vary significantly between languages, in some cases between implementations of a given language, and lifetime of a particular object may vary from one run of the program to another."})}},{id:Object(f.a)(),title:"Aliasing (computing)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Aliasing_(computing)"),anchor:"Aliasing_(computing)",text:{p1:Object(s.jsx)("p",{children:"In computing, aliasing describes a situation in which a data location in memory can be accessed through different symbolic names in the program. Thus, modifying the data through one name implicitly modifies the values associated with all aliased names, which may not be expected by the programmer. As a result, aliasing makes it particularly difficult to understand, analyze and optimize programs. Aliasing analysers intend to make and compute useful information for understanding aliasing in programs."})}},{id:Object(f.a)(),title:"Abstraction (computer science)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Abstraction_(computer_science)"),anchor:"Abstraction_(computer_science)",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"In software engineering and computer science, abstraction is:"}),Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:"The process of removing physical, spatial, or temporal details or attributes in the study of objects or systems to focus attention on details of greater importance; it is similar in nature to the process of generalization;"}),Object(s.jsx)("li",{children:"the creation of abstract concept-objects by mirroring common features or attributes of various non-abstract objects or systems of study - the result of the process of abstraction."})]})]})}},{id:Object(f.a)(),title:"Task (computing)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Task_(computing)"),anchor:"Task_(computing)",text:{p1:Object(s.jsx)("p",{children:'In computing, a task is a unit of execution or a unit of work. The term is ambiguous; precise alternative terms include process, light-weight process, thread (for execution), step, request, or query (for work). In the adjacent diagram, there are queues of incoming work to do and outgoing completed work, and a thread pool of threads to perform this work. Either the work units themselves or the threads that perform the work can be referred to as "tasks", and these can be referred to respectively as requests/responses/threads, incoming tasks/completed tasks/threads (as illustrated), or requests/responses/tasks.'})}},{id:Object(f.a)(),title:"Message passing",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Message_passing"),anchor:"Message_passing",text:{p1:Object(s.jsx)("p",{children:"In computer science, message passing is a technique for invoking behavior (i.e., running a program) on a computer. The invoking program sends a message to a process (which may be an actor or object) and relies on that process and its supporting infrastructure to then select and run some appropriate code. Message passing differs from conventional programming where a process, subroutine, or function is directly invoked by name. Message passing is key to some models of concurrency and object-oriented programming."})}},{id:Object(f.a)(),title:"Scheduling (computing)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Scheduling_(computing)"),anchor:"Scheduling_(computing)",text:{p1:Object(s.jsx)("p",{children:"In computing, scheduling is the action of assigning resources to perform tasks. The resources may be processors, network links or expansion cards. The tasks may be threads, processes or data flows."})}},{id:Object(f.a)(),title:"Recursion (computer science)",isLargerTitle:!1,path:"/cs",url:"".concat(M,"/Recursion_(computer_science)"),anchor:"Recursion_(computer_science)",text:{p1:Object(s.jsx)("p",{children:"In computer science, recursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code. The approach can be applied to many types of problems, and recursion is one of the central ideas of computer science."})}}],z=E.length;x(E);y([],z,E);var J=[{id:Object(f.a)(),title:"Notes",isLargerTitle:!0,path:"/note",url:"",anchor:"mynotes",text:{p1:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:"\u8ba1\u7b97\u673a\u7528\u6570\u636e\u7ed9\u73b0\u5b9e\u4e16\u754c\u5efa\u6a21\uff0c\u6570\u636e\u4e5f\u662f\u9700\u8981\u5bb9\u5668\u6765\u88c5\uff0c\u6bd4\u5982\u8bf4\u6570\u636e\u7ed3\u6784(\u6211\u89c9\u5f97\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u662fshape\u6765\u8fdb\u884c\u63cf\u8ff0\u73b0\u5b9e\u751f\u6d3b\u4e2d\u5bf9\u8c61\u7684\u6837\u5b50)\u4e4b\u7c7b\u7684\uff0c\u50cf\u5bf9\u8c61\uff0c\u6570\u7ec4\u3002"}),Object(s.jsx)("li",{children:"\u5b83\u662f\u4ec0\u4e48\uff1f\u7136\u540e\u7528\u6765\u505a\u4ec0\u4e48(\u76ee\u7684)\uff1f\u8be5\u5982\u4f55\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\uff1f\u5b83\u4e3a\u4ec0\u4e48\u88ab\u5236\u9020\u51fa\u6765\uff1f\uff08\u4ea7\u751f\u7684\u539f\u56e0\uff09"}),Object(s.jsx)("li",{children:"\u7f16\u7a0b\u5c31\u662f\u7ed9\u8ba1\u7b97\u673a\u4e0b\u6307\u4ee4\uff0c\u628a\u4f60\u6240\u8981\u505a\u7684\u76ee\u7684\u6216\u60f3\u6cd5\u901a\u8fc7\u4ee5\u4ee3\u7801\u7684\u5f62\u5f0f\u5448\u73b0\u3002"}),Object(s.jsx)("li",{children:"\u4e86\u89e3\u4e00\u9879\u65b0\u4e8b\u7269\uff0c\u7406\u89e3\u5b83\u7684\u8d77\u56e0\u3001\u6982\u5ff5\u3001\u7ec4\u6210\u3002"}),Object(s.jsx)("li",{children:"\u5982\u679c\u591a\u4e2a\u5b50\u7a0b\u5e8f\u90fd\u9700\u8981\u7528\u5230\u76f8\u540c\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5168\u5c40\u53d8\u91cf\u3002"}),Object(s.jsx)("li",{children:"\u6211\u8ba4\u4e3a\u60f3\u8981\u5b8c\u6210\u4e00\u4e2a\u4ec0\u4e48\u529f\u80fd\uff0c\u4f1a\u6d89\u53ca\u5230\u884c\u4e3a\u3001\u52a8\u4f5c\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u7528\u5230\u51fd\u6570\uff08\u65b9\u6cd5\uff09\u6765\u8fbe\u5230\u76ee\u7684\u3002"}),Object(s.jsx)("li",{children:"\u7406\u89e3\u6bcf\u4e00\u6761\u8bed\u53e5\u80cc\u540e\u6240\u8868\u8fbe\u7684\u542b\u4e49\uff0c\u8868\u8fbe\u4e86\u4ec0\u4e48\u610f\u601d(\u4f20\u9012\u4e86\u4ec0\u4e48\u4fe1\u606f)\u3002"}),Object(s.jsx)("li",{children:"\u7528\u4ec0\u4e48\u65b9\u6cd5\u628a\u6570\u636e\u4fdd\u5b58\u5230\u53d8\u91cf\u91cc\u9762\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e9b\u53d8\u91cf\u53c8\u901a\u8fc7\u7528\u4ec0\u4e48\u65b9\u5f0f\u7ed3\u5408\u8d77\u6765\uff0c\u6216\u8005\u5f62\u6210\u6570\u636e\u7ed3\u6784\u3002\u5f62\u6210\u6570\u636e\u7ed3\u6784\u4e4b\u540e\uff0c\u518d\u4e4b\u540e\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u6570\u636e\u7684\u65f6\u5019\uff0c\u53c8\u8be5\u7528\u4ec0\u4e48\u65b9\u6cd5\u53bb\u83b7\u53d6\uff0c\u83b7\u53d6\u8fc7\u540e\u6709\u7528\u4ec0\u4e48\u65b9\u6cd5\u6765\u5c55\u793a\u3002"}),Object(s.jsx)("li",{children:"\u5171\u4eab\u4ee3\u7801\uff0c\u62bd\u53d6\u7684\u4e00\u822c\u90fd\u662f\u5177\u6709\u76f8\u540c\u6210\u5206\u7684\u4ee3\u7801\uff0c\u628a\u5176\u653e\u5728\u53e6\u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u3002"}),Object(s.jsx)("li",{children:"\u7f16\u7a0b\u591a\u601d\u8003\u8bbe\u8ba1\u601d\u8def\u3002"}),Object(s.jsx)("li",{children:"\u8ba1\u7b97\u673a\u5c31\u662f\u7528\u6765\u89e3\u51b3\u73b0\u5b9e\u4e2d\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u662f\u4ec0\u4e48\u5462\uff1f\u7528\u4ec0\u4e48\u65b9\u6cd5\u80fd\u89e3\u51b3\u76f8\u5173\u95ee\u9898\u5462\uff1f"}),Object(s.jsx)("li",{children:"\u5bf9\u8c61\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u8fd8\u53ef\u4ee5\u662f\u4e00\u79cd\u7ee7\u627f\u65b9\u5f0f\u3002"}),Object(s.jsx)("li",{children:"\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u8868\u52a8\u4f5c\u3001\u884c\u4e3a\uff0c\u8fd8\u53ef\u4ee5\u8868\u793a\u529f\u80fd\u5757\uff0c\u8fd8\u53ef\u4ee5\u8868\u793a\u51cf\u5c11\u91cd\u590d\u4ee3\u7801\u3002"}),Object(s.jsx)("li",{children:"\u628a\u601d\u7ef4\u3001\u6b65\u9aa4\u3001\u6761\u4ef6\u8f6c\u6362\u6210\u4ee3\u7801\u3002"}),Object(s.jsx)("li",{children:"\u5728\u8003\u8651\u8bbe\u8ba1\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u8981\u601d\u8003\u5982\u679c\u9879\u76ee\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\u600e\u4e48\u529e\uff1f"}),Object(s.jsx)("li",{children:"\u5c3d\u91cf\u628a\u903b\u8f91(\u76f8\u4f3c)\u653e\u5728\u4e00\u4e2amodule\u91cc\u9762(\u6a21\u5757\u5316 \u2014\u300b \u6587\u4ef6)\uff0c\u7136\u540e\u5728\u8fdb\u884c\u6574\u5408\u3002"}),Object(s.jsx)("li",{children:"\u628a\u5185\u5bb9\u76f8\u4f3c\u7684\u653e\u5728\u4e00\u4e2a\u76d2\u5b50\u91cc\uff0c\u4e0d\u8981\u6015\u5d4c\u5957\u591a\u4e2a\u76d2\u5b50\u3002"}),Object(s.jsx)("li",{children:"\u6570\u636e\u5982\u4f55\u5b89\u6392\u5f97\u5f53\uff1f\uff08\u6570\u636e\u7ed3\u6784\uff09\uff0c\u901a\u8fc7\u4ec0\u4e48\u65b9\u6cd5\u624d\u80fd\u83b7\u53d6\u6570\u636e\uff1f\u5728\u5b89\u6392\u7ec4\u5408\u6570\u636e\u65f6\u4e00\u5b9a\u8981\u8003\u8651\u7c98\u5408\u6027\u3002"}),Object(s.jsx)("li",{children:"\u6570\u636e\u5b58\u653e\u7ed3\u6784 + \u8bed\u4e49\u5316"}),Object(s.jsx)("li",{children:"html \u5148\u662f\u6574\u4f53\uff08\u5927\u7684\u5e03\u5c40\uff09\uff0c\u5148\u4e86\u89e3\u6574\u4f53\u67b6\u6784\u5e03\u5c40\u3002"}),Object(s.jsx)("li",{children:"\u5982\u4f55\u628a\u9700\u8981\u7684\u6570\u636e\u4fdd\u5b58\u8d77\u6765\uff0c\u7136\u540e\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u4f20\u9012\u5230\u5404\u4e2a\u9700\u8981\u7528\u7684\u5730\u65b9\u4f7f\u7528"}),Object(s.jsx)("li",{children:"How does it work?"}),Object(s.jsx)("li",{children:"React: Better architecture will result in less re-renders."}),Object(s.jsx)("li",{children:"Algorithm: method for solving a problem."}),Object(s.jsx)("li",{children:"Data Structure: method to store information."}),Object(s.jsx)("li",{children:"After state has been changed by statements(e.g. subroutines, re-store), the system know about it because the changed state has been stored in the memory, we can use it anytimes when we need it."}),Object(s.jsx)("li",{children:"variable(state), reference(identifier to a value), interface(contract), data structure and algorithm"}),Object(s.jsx)("li",{children:"Process of abstraction build on details of reality. Find the key between connections."}),Object(s.jsx)("li",{children:"How to describe things clearly? I think it is a relation about the way to describe details step by step. So, how to get the details?"}),Object(s.jsx)("li",{children:"Programming languages(the code we write) are just the implementation(translation) of algorithms(details), I need to find out the process of details based on experience and then use code to model the details."}),Object(s.jsx)("li",{children:"What is the purpose of the chunk of code? What kind of data it passed and handled?"})]})}}],F=[{id:Object(f.a)(),title:"Git",isLargerTitle:!0,path:"/git",url:"".concat("https://git-scm.com/"),anchor:"git",text:{p1:Object(s.jsx)("p",{children:"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.Git is a version control system. Git helps you keep track of code changes. Git is used to collaborate on code."})}},{id:Object(f.a)(),title:"Git Push to GitHub",isLargerTitle:!1,path:"/git",url:"",anchor:"git-push-to-github",text:{p1:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("li",{children:'Push Local Repository to GitHub: git remote add origin https://github.com/w3schools-test/hello-world.git. "git remote add origin URL" specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo.'}),Object(s.jsx)("li",{children:"Now we are going to push our master branch to the origin url, and set it as the default remote branch: git push --set-upstream origin master"}),Object(s.jsx)("li",{children:'Commit the changes: git commit -a -m "Updated index.html. Resized image"'}),Object(s.jsx)("li",{children:"And check the status: git status"}),Object(s.jsx)("li",{children:"Push our changes to our remote origin: git push origin"})]})}},{id:Object(f.a)(),title:"! [rejected] master -> master (non-fast-forward) - Git Error",isLargerTitle:!1,path:"/git",url:"",anchor:"error",text:{p1:Object(s.jsxs)("div",{children:[Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsx)("p",{children:"To prevent you from losing history, non-fast-forward updates were rejected Merge the remote changes (e.g. 'git pull') before pushing again."}),Object(s.jsx)("li",{children:"git fetch origin"}),Object(s.jsx)("li",{children:"git merge origin master(your branch name)"})]}),Object(s.jsx)("p",{children:"Or, you can simply use git pull to perform both commands at once:"}),Object(s.jsx)("ol",{className:"list",children:Object(s.jsx)("li",{children:"git pull origin master(YOUR_BRANCH_NAME, Grabs online updates and merges them with your local work )"})})]})}}],N="https://en.wikipedia.org/wiki",B=[{id:Object(f.a)(),title:"Other Terms",isLargerTitle:!0,path:"/other_terms",url:"",anchor:"other_terms",text:{p1:Object(s.jsx)("p",{children:"These pages describe the concept maybe good for promoting programming skills, maybe including life."})}},{id:Object(f.a)(),title:"Hierarchy",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Hierarchy"),anchor:"Hierarchy",text:{p1:Object(s.jsx)("p",{children:'A hierarchy is an arrangement of items (objects, names, values, categories, etc.) that are represented as being "above", "below", or "at the same level as" one another. Hierarchy is an important concept in a wide variety of fields, such as philosophy, architecture, design, mathematics, computer science, organizational theory, systems theory, systematic biology, and the social sciences (especially political philosophy).'})}},{id:Object(f.a)(),title:"Design pattern",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Design_pattern"),anchor:"Design_pattern",text:{p1:Object(s.jsx)("p",{children:"A design pattern is the re-usable form of a solution to a design problem. The idea was introduced by the architect Christopher Alexander and has been adapted for various other disciplines, notably software engineering."})}},{id:Object(f.a)(),title:"Interaction",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Interaction"),anchor:"Interaction",text:{p1:Object(s.jsx)("p",{children:"Interaction is a kind of action that occurs as two or more objects have an effect upon one another. The idea of a two-way effect is essential in the concept of interaction, as opposed to a one-way causal effect. Closely related terms are interactivity and interconnectivity, of which the latter deals with the interactions of interactions within systems: combinations of many simple interactions can lead to surprising emergent phenomena. Interaction has different tailored meanings in various sciences."})}},{id:Object(f.a)(),title:"Flowchart",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Flowchart"),anchor:"Flowchart",text:{p1:Object(s.jsx)("p",{children:"A flowchart is a type of diagram that represents a workflow or process. A flowchart can also be defined as a diagrammatic representation of an algorithm, a step-by-step approach to solving a task."})}},{id:Object(f.a)(),title:"Data",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Data"),anchor:"Data",text:{p1:Object(s.jsx)("p",{children:"Data are individual facts, statistics, or items of information, often numeric. In a more technical sense, data are a set of values of qualitative or quantitative variables about one or more persons or objects, while a datum (singular of data) is a single value of a single variable."})}},{id:Object(f.a)(),title:"Engineering",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Engineering"),anchor:"Engineering",text:{p1:Object(s.jsx)("p",{children:"Engineering is the use of scientific principles to design and build machines, structures, and other items, including bridges, tunnels, roads, vehicles, and buildings. The discipline of engineering encompasses a broad range of more specialized fields of engineering, each with a more specific emphasis on particular areas of applied mathematics, applied science, and types of application. See glossary of engineering."})}},{id:Object(f.a)(),title:"Rule of thumb",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Rule_of_thumb"),anchor:"Rule_of_thumb",text:{p1:Object(s.jsx)("p",{children:"Rule of thumb is an approximate method for doing something, based on practical experience rather than theory."})}},{id:Object(f.a)(),title:"Computing",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Computing"),anchor:"Computing",text:{p1:Object(s.jsx)("p",{children:"Computing is any goal-oriented activity requiring, benefiting from, or creating computing machinery. It includes the study and experimentation of algorithmic processes and development of both hardware and software. It has scientific, engineering, mathematical, technological and social aspects. Major computing disciplines include computer engineering, computer science, cybersecurity, data science, information systems, information technology and software engineering."})}},{id:Object(f.a)(),title:"Tree structure",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Tree_structure"),anchor:"Tree_structure",text:{p1:Object(s.jsx)("p",{children:'A tree structure, tree diagram, or tree model is a way of representing the hierarchical nature of a structure in a graphical form. It is named a "tree structure" because the classic representation resembles a tree, although the chart is generally upside down compared to a biological tree, with the "stem" at the top and the "leaves" at the bottom.'})}},{id:Object(f.a)(),title:"Sequence",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Sequence"),anchor:"Sequence",text:{p1:Object(s.jsx)("p",{children:"In mathematics, a sequence is an enumerated collection of objects in which repetitions are allowed and order matters. In computing and computer science, finite sequences are sometimes called strings, words or lists, the different names commonly corresponding to different ways to represent them in computer memory; infinite sequences are called streams. The empty sequence ( ) is included in most notions of sequence, but may be excluded depending on the context."})}},{id:Object(f.a)(),title:"Context (language use)",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Context_(language_use)"),anchor:"Context_(language_use)",text:{p1:Object(s.jsx)("p",{children:'In semiotics, linguistics, sociology and anthropology, context refers to those objects or entities which surround a focal event, in these disciplines typically a communicative event, of some kind. Context is "a frame that surrounds the event and provides resources for its appropriate interpretation". It is thus a relative concept, only definable with respect to some focal event within a frame, not independently of that frame.'})}},{id:Object(f.a)(),title:"Race condition",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Race_condition"),anchor:"Race_condition",text:{p1:Object(s.jsx)("p",{children:"A race condition or race hazard is the condition of an electronics, software, or other system where the system's substantive behavior is dependent on the sequence or timing of other uncontrollable events. It becomes a bug when one or more of the possible behaviors is undesirable."})}},{id:Object(f.a)(),title:"Reason",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Reason"),anchor:"Reason",text:{p1:Object(s.jsx)("p",{children:"Reason is the capacity of consciously applying logic by drawing conclusions from new or existing information, with the aim of seeking the truth. It is closely associated with such characteristically human activities as philosophy, science, language, mathematics, and art, and is normally considered to be a distinguishing ability possessed by humans. Reason is sometimes referred to as rationality."})}},{id:Object(f.a)(),title:"Property (philosophy)",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Property_(philosophy)"),anchor:"Property_(philosophy)",text:{p1:Object(s.jsx)("p",{children:"In logic and philosophy (especially metaphysics), a property is a characteristic of an object; a red object is said to have the property of redness. The property may be considered a form of object in its own right, able to possess other properties. A property, however, differs from individual objects in that it may be instantiated, and often in more than one thing. It differs from the logical/mathematical concept of class by not having any concept of extensionality, and from the philosophical concept of class in that a property is considered to be distinct from the objects which possess it. Understanding how different individual entities (or particulars) can in some sense have some of the same properties is the basis of the problem of universals."})}},{id:Object(f.a)(),title:"Matery learning",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Matery_learning"),anchor:"Matery_learning",text:{p1:Object(s.jsx)("p",{children:'Mastery learning (or, as it was initially called, "learning for mastery"; also known as "mastery-based learning") is an instructional strategy and educational philosophy, first formally proposed by Benjamin Bloom in 1968. Mastery learning maintains that students must achieve a level of mastery (e.g., 90% on a knowledge test) in prerequisite knowledge before moving forward to learn subsequent information. If a student does not achieve mastery on the test, they are given additional support in learning and reviewing the information and then tested again. This cycle continues until the learner accomplishes mastery, and they may then move on to the next stage.'})}},{id:Object(f.a)(),title:"Logic gate",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Logic_gate"),anchor:"Logic_gate",text:{p1:Object(s.jsx)("p",{children:"A logic gate is an idealized model of computation or a physical electronic device implementing a Boolean function, a logical operation performed on one or more binary inputs that produces a single binary output. Depending on the context, the term may refer to an ideal logic gate, one that has for instance zero rise time and unlimited fan-out, or it may refer to a non-ideal physical device(see Ideal and real op-amps for comparison)."})}},{id:Object(f.a)(),title:"Philosophy",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Philosophy"),anchor:"Philosophy",text:{p1:Object(s.jsx)("p",{children:"Philosophy (from Greek: \u03c6\u03b9\u03bb\u03bf\u03c3\u03bf\u03c6\u03af\u03b1, philosophia, 'love of wisdom') is the study of general and fundamental questions, such as those about existence, reason, knowledge, values, mind, and language. Such questions are often posed as problems to be studied or resolved."})}},{id:Object(f.a)(),title:"Time",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Time"),anchor:"Time",text:{p1:Object(s.jsx)("p",{children:"Time is the continued sequence of existence and events that occurs in an apparently irreversible succession from the past, through the present, into the future. It is a component quantity of various measurements used to sequence events, to compare the duration of events or the intervals between them, and to quantify rates of change of quantities in material reality or in the conscious experience. Time is often referred to as a fourth dimension, along with three spatial dimensions."})}},{id:Object(f.a)(),title:"Computational thinking",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Computational_thinking"),anchor:"Computational_thinking",text:{p1:Object(s.jsx)("p",{children:"In education, computational thinking (CT) is a set of problem-solving methods that involve expressing problems and their solutions in ways that a computer could also execute. It involves automation of processes, but also using computing to explore, analyze, and understand processes (natural and artificial)."})}},{id:Object(f.a)(),title:"Problem solving",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Problem_solving"),anchor:"Problem_solving",text:{p1:Object(s.jsx)("p",{children:"Problem solving consists of using generic or ad hoc methods in an orderly manner to find solutions to difficulties."})}},{id:Object(f.a)(),title:"Concept",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Concept"),anchor:"Concept",text:{p1:Object(s.jsx)("p",{children:"Concepts are defined as abstract ideas. They are understood to be the fundamental building blocks of the concept behind principles, thoughts and beliefs. They play an important role in all aspects of cognition. As such, concepts are studied by several disciplines, such as linguistics, psychology, and philosophy, and these disciplines are interested in the logical and psychological structure of concepts, and how they are put together to form thoughts and sentences. The study of concepts has served as an important flagship of an emerging interdisciplinary approach called cognitive science."})}},{id:Object(f.a)(),title:"Abstraction",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Abstraction"),anchor:"Abstraction",text:{p1:Object(s.jsx)("p",{children:'Abstraction in its main sense is a conceptual process where general rules and concepts are derived from the usage and classification of specific examples, literal ("real" or "concrete") signifiers, first principles, or other methods.'})}},{id:Object(f.a)(),title:"Idea",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Idea"),anchor:"Idea",text:{p1:Object(s.jsx)("p",{children:"In common usage and in philosophy, ideas are the results of thought. Also in philosophy, ideas can also be mental representational images of some object. Many philosophers have considered ideas to be a fundamental ontological category of being. The capacity to create and understand the meaning of ideas is considered to be an essential and defining feature of human beings. In a popular sense, an idea arises in a reflexive, spontaneous manner, even without thinking or serious reflection, for example, when we talk about the idea of a person or a place. A new or an original idea can often lead to innovation."})}},{id:Object(f.a)(),title:"Implementation",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Implementation"),anchor:"Implementation",text:{p1:Object(s.jsx)("p",{children:"Implementation is the realization of an application, or execution of a plan, idea, model, design, specification, standard, algorithm, or policy."})}},{id:Object(f.a)(),title:"Computation",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Computation"),anchor:"Computation",text:{p1:Object(s.jsx)("p",{children:"Computation is any type of calculation that includes both arithmetical and non-arithmetical steps and which follows a well-defined model (e.g. an algorithm)."})}},{id:Object(f.a)(),title:"Calculation",isLargerTitle:!1,path:"/other_terms",url:"".concat(N,"/Calculation"),anchor:"Calculation",text:{p1:Object(s.jsx)("p",{children:"A calculation is a deliberate process that transforms one or more inputs into one or more results. The term is used in a variety of senses, from the very definite arithmetical calculation of using an algorithm, to the vague heuristics of calculating a strategy in a competition, or calculating the chance of a successful relationship between two people."})}}],V="https://en.wikipedia.org/wiki",X=[{id:Object(f.a)(),title:"Data Structure",isLargerTitle:!0,path:"/data_structure",url:"".concat("https://www.tutorialspoint.com/data_structures_algorithms","/index.htm"),anchor:"data_structure",text:{p1:Object(s.jsx)("p",{children:"Data Structures are the programmatic way of storing data so that data can be used efficiently."})}},{id:Object(f.a)(),title:"Array data structure",isLargerTitle:!1,path:"/data_structure",url:"".concat(V,"/Array_data_structure"),anchor:"Array_data_structure",text:{p1:Object(s.jsx)("p",{children:"In computer science, an array data structure, or simply an array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. An array is stored such that the position of each element can be computed from its index tuple by a mathematical formula. The simplest type of data structure is a linear array, also called one-dimensional array."})}},{id:Object(f.a)(),title:"Linked list",isLargerTitle:!1,path:"/data_structure",url:"".concat(V,"/Linked_list"),anchor:"Linked_list",text:{p1:Object(s.jsx)("p",{children:"In computer science, a linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence."})}},{id:Object(f.a)(),title:"Stack (abstract data type)",isLargerTitle:!1,path:"/data_structure",url:"".concat(V,"/Stack_(abstract_data_type)"),anchor:"Stack_(abstract_data_type)",text:{p1:Object(s.jsx)("p",{children:"In computer science, a stack is an abstract data type that serves as a collection of elements, with two main principal operations: Push, which adds an element to the collection, and Pop, which removes the most recently added element that was not yet removed."})}},{id:Object(f.a)(),title:"Tree (data structure)",isLargerTitle:!1,path:"/data_structure",url:"".concat(V,"/Tree_(data_structure)"),anchor:"Tree_(data_structure)",text:{p1:Object(s.jsx)("p",{children:"In computer science, a tree is a widely used abstract data type that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node, represented as a set of linked nodes."})}}],Y="https://en.wikipedia.org/wiki",Q=[{id:Object(f.a)(),title:"Algorithms",isLargerTitle:!0,path:"/algorithms",url:"".concat("https://www.tutorialspoint.com/data_structures_algorithms","/index.htm"),anchor:"algorithms",text:{p1:Object(s.jsx)("p",{children:"Algorithm is a step-by-step procedure, which defines a set of instructions to be executed in a certain order to get the desired output. Algorithms tell the programmers how to code the program."})}},{id:Object(f.a)(),title:"Divide-and-conquer algorithm",isLargerTitle:!1,path:"/data_structure",url:"".concat(Y,"/Divide-and-conquer_algorithm"),anchor:"Divide-and-conquer_algorithm",text:{p1:Object(s.jsx)("p",{children:"In computer science, divide and conquer is an algorithm design paradigm. A divide-and-conquer algorithm recursively breaks down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem."})}},{id:Object(f.a)(),title:"Greedy algorithm",isLargerTitle:!1,path:"/data_structure",url:"".concat(Y,"/Greedy_algorithm"),anchor:"Greedy_algorithm",text:{p1:Object(s.jsx)("p",{children:"A greedy algorithm is any algorithm that follows the problem-solving heuristic of making the locally optimal choice at each stage. In many problems, a greedy strategy does not produce an optimal solution, but a greedy heuristic can yield locally optimal solutions that approximate a globally optimal solution in a reasonable amount of time."})}}],K="https://webpack.js.org",Z=[{id:Object(f.a)(),title:"Webpack",isLargerTitle:!0,path:"/webpack",url:"".concat(K),anchor:"webpack",text:{p1:Object(s.jsx)("p",{children:"At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles, which are static assets to serve your content from."})}},{id:Object(f.a)(),title:"Entry",isLargerTitle:!1,path:"/webpack",url:"".concat(K,"/concepts/#entry"),anchor:"entry",text:{p1:Object(s.jsxs)("p",{children:["An ",Object(s.jsx)("strong",{children:"entry point"})," indicates which module webpack should use to begin building out its internal dependency graph. Webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly). By default its value is ./src/index.js."]})}},{id:Object(f.a)(),title:"Output",isLargerTitle:!1,path:"/webpack",url:"".concat(K,"/concepts/#output"),anchor:"output",text:{p1:Object(s.jsxs)("p",{children:["The ",Object(s.jsx)("strong",{children:"output"})," property tells webpack where to emit the bundles it creates and how to name these files. It defaults to ./dist/main.js for the main output file and to the ./dist folder for any other generated file."]})}},{id:Object(f.a)(),title:"Loaders",isLargerTitle:!1,path:"/webpack",url:"".concat(K,"/concepts/#loaders"),anchor:"loaders",text:{p1:Object(s.jsxs)("p",{children:["Out of the box, webpack only understands JavaScript and JSON files."," ",Object(s.jsx)("strong",{children:"Loaders"})," allow webpack to process other types of files and convert them into valid modules that can be consumed by your application and added to the dependency graph."]})}},{id:Object(f.a)(),title:"Plugins",isLargerTitle:!1,path:"/webpack",url:"".concat(K,"/concepts/#plugins"),anchor:"plugins",text:{p1:Object(s.jsx)("p",{children:"While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables."})}},{id:Object(f.a)(),title:"Mode",isLargerTitle:!1,path:"/webpack",url:"".concat(K,"/concepts/#mode"),anchor:"mode",text:{p1:Object(s.jsx)("p",{children:"By setting the `mode` parameter to either `development`, `production` or `none`, you can enable webpack's built-in optimizations that correspond to each environment. The default value is `production`."})}}],$=Z.length;x(Z);y([],$,Z);var ee=[{id:Object(f.a)(),title:"Web Components",isLargerTitle:!0,path:"/web_components",url:"https://developer.mozilla.org/en-US/docs/Web/Web_Components",anchor:"web_components",text:{p1:Object(s.jsx)("p",{children:"Web Components is a suite of different technologies allowing you to create reusable custom elements \u2014 with their functionality encapsulated away from the rest of your code \u2014 and utilize them in your web apps."})}}],te=ee.length,ae="https://en.wikipedia.org/wiki",re=[{id:Object(f.a)(),title:"Web Terms",isLargerTitle:!0,path:"/web_terms",url:"",anchor:"web_terms",text:{p1:Object(s.jsx)("p",{children:"The World Wide Web (WWW), commonly known as the Web, is an information system where documents and other web resources are identified by Uniform Resource Locators (URLs, such as https://example.com/), which may be interlinked by hyperlinks, and are accessible over the Internet."})}},{id:Object(f.a)(),title:"Client\u2013server model",isLargerTitle:!1,path:"/web_terms",url:"".concat(ae,"/Client\u2013server_model"),anchor:"Client\u2013server_model",text:{p1:Object(s.jsx)("p",{children:"Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients. Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web."})}},{id:Object(f.a)(),title:"Hypertext Transfer Protocol",isLargerTitle:!1,path:"/web_terms",url:"".concat(ae,"/Hypertext_Transfer_Protocol"),anchor:"Hypertext_Transfer_Protocol",text:{p1:Object(s.jsx)("p",{children:"The Hypertext Transfer Protocol (HTTP) is an application layer protocol in the Internet protocol suite model for distributed, collaborative, hypermedia information systems. HTTP is the foundation of data communication for the World Wide Web, where hypertext documents include hyperlinks to other resources that the user can easily access, for example by a mouse click or by tapping the screen in a web browser."})}},{id:Object(f.a)(),title:"Frontend and backend",isLargerTitle:!1,path:"/web_terms",url:"".concat(ae,"/Frontend_and_backend"),anchor:"Frontend_and_backend",text:{p1:Object(s.jsx)("p",{children:"In software engineering, the terms frontend and backend (or sometimes referred to as back end or back-end) refer to the separation of concerns between the presentation layer (frontend), and the data access layer (backend) of a piece of software, or the physical infrastructure or hardware. In the client-server model, the client is usually considered the frontend and the server is usually considered the backend, even when some presentation work is actually done on the server itself."})}},{id:Object(f.a)(),title:"Presentation layer",isLargerTitle:!1,path:"/web_terms",url:"".concat(ae,"/Presentation_layer"),anchor:"Presentation_layer",text:{p1:Object(s.jsx)("p",{children:"In the seven-layer OSI model of computer networking, the presentation layer is layer 6 and serves as the data translator for the network. It is sometimes called the syntax layer."})}},{id:Object(f.a)(),title:"Data access layer",isLargerTitle:!1,path:"/web_terms",url:"".concat(ae,"/Data_access_layer"),anchor:"Data_access_layer",text:{p1:Object(s.jsx)("p",{children:"A data access layer (DAL) in computer software is a layer of a computer program which provides simplified access to data stored in persistent storage of some kind, such as an entity-relational database. This acronym is prevalently used in Microsoft environments."})}},{id:Object(f.a)(),title:"Web server",isLargerTitle:!1,path:"/web_terms",url:"".concat(ae,"/Web_server"),anchor:"Web server",text:{p1:Object(s.jsx)("p",{children:"A web server is computer software and underlying hardware that accepts requests via HTTP (the network protocol created to distribute web content) or its secure variant HTTPS. A user agent, commonly a web browser or web crawler, initiates communication by making a request for a web page or other resource using HTTP, and the server responds with the content of that resource or an error message. A web server can also accept and store resources sent from the user agent if configured to do so."})}}],ie=re.length;x(re);y([],ie,re);var ne="https://www.tutorialspoint.com/webgl",oe=[{id:Object(f.a)(),title:"WebGL",isLargerTitle:!0,path:"/webgl",url:"".concat(ne,"/index.htm"),anchor:"WebGL",text:{p1:Object(s.jsx)("p",{children:"WebGL (Web Graphics Library) is the new standard for 3D graphics on the Web, designed for rendering 2D graphics and interactive 3D graphics."})}},{id:Object(f.a)(),title:"OpenGL",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_introduction.htm"),anchor:"OpenGL",text:{p1:Object(s.jsx)("p",{children:"OpenGL (Open Graphics Library) is a cross-language, cross-platform API for 2D and 3D graphics. It is a collection of commands."})}},{id:Object(f.a)(),title:"Rendering",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_introduction.htm"),anchor:"Rendering",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"Rendering is the process of generating an image from a model using computer programs. In graphics, a virtual scene is described using information like geometry, viewpoint, texture, lighting, and shading, which is passed through a render program. The output of this render program will be a digital image."}),Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"Software Rendering"})," - All the rendering calculations are done with the help of CPU."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"Hardware Rendering"})," - All the graphics computations are done by the GPU (Graphical processing unit)."]})]})]})}},{id:Object(f.a)(),title:"GPU",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_introduction.htm"),anchor:"GPU",text:{p1:Object(s.jsx)("p",{children:'According to NVIDIA, a GPU is "a single chip processor with integrated transform, lighting, triangle setup/clipping, and rendering engines capable of processing a minimum of 10 million polygons per second." Unlike multi-core processors with a few cores optimized for sequential processing, a GPU consists of thousands of smaller cores that process parallel workloads efficiently. Therefore, the GPU accelerates the creation of images in a frame buffer (a portion of ram which contains a complete frame data) intended for output to a display.'})}},{id:Object(f.a)(),title:"The Rendering Context",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_introduction.htm"),anchor:"rendering_context",text:{p1:Object(s.jsx)("p",{children:"The canvas element has a DOM method called getContext(), which is used to obtain the rendering context and its drawing functions. This method takes one parameter, the type of context 2d."})}},{id:Object(f.a)(),title:"WebGL Context",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_introduction.htm"),anchor:"webgl_context",text:{p1:Object(s.jsx)("p",{children:'HTML5 Canvas is also used to write WebGL applications. To create a WebGL rendering context on the canvas element, you should pass the string "experimental-webgl", instead of "2d" to the "canvas.getContext()" method. Some browsers support only \'webgl\'.'})}},{id:Object(f.a)(),title:"WebGL - Coordinate System",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_basics.htm"),anchor:"coordinate system",text:{p1:Object(s.jsxs)("p",{children:["Just like any other 3D system, you will have x, y and z axes in WebGL, where the z axis signifies ",Object(s.jsx)("b",{children:"depth"}),". The coordinates in WebGL are restricted to (1, 1, 1) and (-1, -1, - 1). It means \u2212 if you consider the screen projecting WebGL graphics as a cube, then one corner of the cube will be (1, 1, 1) and the opposite corner will be (-1, -1, -1). WebGL won't display anything that is drawn beyond these boundaries."]})}},{id:Object(f.a)(),title:"WebGL Graphics",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_basics.htm"),anchor:"webgl_graphics",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"After getting the WebGL context of the canvas object, you can start drawing graphical elements using WebGL API in JavaScript. Here are some fundamental terms you need to know before starting with WebGL."}),Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"Vertices"})," - Generally, to draw objects such as a polygon, we mark the points on the plane and join them to form a desired polygon. A ",Object(s.jsx)("b",{children:"vertex"})," is a point which defines the conjunction of the edges of a 3D object. It is represented by three floating point values each representing x, y, z axes respectively."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"Indices"})," - In WebGL, numerical values are used to identify the vertices. These numerical values are known as indices. These indices are used to draw meshes in WebGL."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"Arrays"})," - Unlike OpenGL and JoGL, there are no predefined methods in WebGL to render the vertices directly. We have to store them manually using JavaScript arrays."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"Buffers"})," - Buffers are the memory areas of WebGL that hold the data. There are various buffers namely, drawing buffer, frame buffer, ",Object(s.jsx)("b",{children:"vetex buffer"}),", and ",Object(s.jsx)("b",{children:"index buffer"}),". The vertex buffer and index buffer are used to describe and process the geometry of the model."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"Mesh"})," - To draw 2D or 3D objects, the WebGL API provides two methods namely, ",Object(s.jsx)("b",{children:"drawArrays()"})," and ",Object(s.jsx)("b",{children:"drawElements()"}),". These two methods accept a parameter called mode using which you can select the object you want to draw. The options provided by this field are restricted to points, lines, and triangles."]})]})]})}},{id:Object(f.a)(),title:"Vertex Shader",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_basics.htm"),anchor:"vertex_shader",text:{p1:Object(s.jsx)("p",{children:"Vertext shader is the program code called on every vertex. It is used to transform (move) the geometry (ex: triangle) from one place to another. It handles the data of each vertex (per-vertex data) such as vertex coordinates, normals, colors, and texture coordinates."})}},{id:Object(f.a)(),title:"Fragment Shader(Pixel Shader)",isLargerTitle:!1,path:"/webgl",url:"".concat(ne,"/webgl_basics.htm"),anchor:"fragment_shader",text:{p1:Object(s.jsxs)("p",{children:["A mesh is formed by multiple triangles, and the surface of each of the triangles is known as a ",Object(s.jsx)("strong",{children:"fragment"}),". Fragment shader is the code that runs on all pixels of every fragment. It is written to calculate and fill the color on ",Object(s.jsx)("i",{children:"individual pixels"}),"."]})}},{id:Object(f.a)(),title:"WebGL Glossary",isLargerTitle:!1,path:"/webgl",url:"".concat("http://learnwebgl.brown37.net","/the_big_picture/introduction.html"),anchor:"webgl_glossary",text:{p1:Object(s.jsx)(s.Fragment,{children:Object(s.jsxs)("ol",{className:"list",children:[Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"mastery learning"})," - learn a foundational topic completely before moving on to harder more advanced topics."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"web server"})," - a program that runs on a server computer and stores web pages and related files. When a client computer requests a web page, the web server sends the requested files to the client."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"CPU"})," - central processing unit - the hardware that controls a computing device and performs all of its calculations."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"GPU"})," - graphic processing unit - the hardware that is optimized to produce 3D computer graphics."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"RAM"})," - random access memory - where data and programs are stored for CPU access and manipulation."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"GPU memory"})," - where data and programs are stored for GPU access and manipulation."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"preprocessing step"})," - manipulation of data that happens once."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"computer graphics"})," - pictures and movies created using computers."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"raster graphics"})," - a picture defined by many small dots of color."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"vector graphics"})," - a picture composed of geometric shapes defined using mathematical equations."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"computer-generated imagery(CGI)"})," - using computers to create or modify raster images."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"3D computer graphics"})," - the entire process of creating raster images from vector graphics data."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"render"})," - create a raster image (picture) from vector graphics data."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"graphics pipeline"})," - a series of steps that transforms vector graphics descriptions of objects into a raster image."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"shader program"})," - a computer program written in GLSL (GL Shader Language) that runs on the GPU."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"vertext shader"})," - a computer program written in GLSL that positions the geometry of models in a scene."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"fragment shader"})," - a computer program written in GLSL that assigns a color to the pixels that compose a face of a model."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"GL"})," - graphics language - a proprietary software system for creating 3D computer graphics that was created by Silicon Graphics Inc. in the 1980's"]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"OpenGL"})," - a device independent software system for creating 3D computer graphics that was released to the public by Silicon Graphics Inc. in 1992. It has gone through constant upgrades, enhancements, and re-designs."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"OpenGl ES"})," - OpenGL embedded subset - a stripped down version of OpenGL for cheaper, low-power hardware."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"WebGL"})," - a device independent software system for creating 3D computer graphics in a web browser. It is an implementation of OpenGL ES 2.0 in JavaScript."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"folder hierarchy"})," - an organization of file folders, where each folder has a unique parent folder and possibly contains one or more sub-folders."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"current working folder"})," - the folder on the web server that contains the original HTML web page file."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"relative file path"})," - a series of folder references separated by forward slashes that starts from the"," ",Object(s.jsx)("i",{children:"current working folder"}),"."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"absolute file path"})," - a series of folder references"," ",Object(s.jsx)("b",{children:"starting the a single forward slash"})," and separated by forward slashes. The path is always from the root folder of the web site on the web server."]}),Object(s.jsxs)("li",{children:['"." - a reference to the ',Object(s.jsx)("i",{children:"current working folder"}),"."," "]}),Object(s.jsx)("li",{children:'".." - a reference to the parent folder.'}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"object oriented programming"})," - a style of programming where a class defines a collection of data and a set of methods/functions that manipulates that data. Multiple instances of a class can be created to implement separate objects of the class."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"class"})," - a collection of data and a set of methods/functions that manipulates that data."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"object"})," - an instance of a class that contains unique data. The manipulation of an object does not affect other objects implemented from the same class."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"global identifier"})," - a variable or function that can be used anywhere in a program. Global identifiers are bad and should be avoided whenever possible."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"GLSL"})," - graphics language shader language - a programming language used in the graphics pipeline to manipulate graphics data."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"context"})," - the environment in which something happens."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"WebGL context"})," - a JavaScript object that stores the state of a WebGL program and provides an interface to all WebGL API functions."]}),Object(s.jsx)("li",{children:"-------------------------------"}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"virtual"})," - Something that does not physically exist but is created by software to appear real. A virtual world is a simulated, artificial, imitation of the real world - or a make-believe world that exists only in your mind."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"object"})," - A single entity in a virtual world that has a location, takes up some volume of space, and can be moved, scaled, and rotated."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"model"})," - A mathematical description of an object."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"scene"})," - A collection of objects that make up a virtual world. A scene contains objects that we want to visualize."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"rendering"})," - The process of creating an image from a collection of virtual objects. The image is a representation of what is visible from a virtual camera. The objects are only visible if there is virtual lighting in the scene."]})]})})}}],se=oe.length;x(oe);y([],se,oe);var ce,le,he,de,pe,ue=O.concat(L,S,A,W,H,E,J,F,B,X,Q,Z,ee,oe,re),me=Object(b.memo)((function(e){var t=e.spanRef,a=e.terms,r=e.isShowPopPage,i=e.setIsShowPopPage;if(""===a.trim())return null;var n=ue.filter((function(e){return e.title.toLowerCase().includes(a.toLowerCase())?e:null}));return Object(s.jsx)("div",{className:"pop-page",children:Object(s.jsxs)("section",{className:"container",children:[Object(s.jsx)("section",{className:"close-wrapper",children:Object(s.jsx)("span",{className:"close",ref:t,children:"\xd7"})}),Object(s.jsx)("section",{className:"terms-wrapper",children:n.map((function(e){return Object(s.jsxs)("article",{className:"term",children:[Object(s.jsx)("h3",{children:Object(s.jsx)("a",{href:"".concat(e.path,"#").concat(e.anchor),onClick:function(){return i(!r)},children:e.title})}),Object(s.jsx)("div",{className:"text-box",children:e.text.p1})]},e.id)}))})]})})})),ge=Object(r.forwardRef)((function(e,t){return Object(s.jsx)(be,{children:Object(s.jsx)("div",{onClick:function(){t.current.scrollIntoView({behavior:"smooth"})},children:"Top"})})})),be=g.a.section(ce||(ce=Object(u.a)(["\n  div {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    background-color: rgba(0, 0, 0, 0.1);\n    color: #666;\n    position: fixed;\n    bottom: 10px;\n    right: 4%;\n    text-align: center;\n    line-height: 80px;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n"]))),fe=Object(b.memo)(ge),je=function(){var e=Object(r.useState)(""),t=Object(m.a)(e,2),a=t[0],i=t[1],n=Object(r.useState)(!1),o=Object(m.a)(n,2),c=o[0],l=o[1],d=Object(r.useRef)(null),p=Object(r.useRef)(null),u=Object(r.useRef)(null),g=Object(r.useCallback)((function(){window.addEventListener("click",(function(e){e.target.matches(".close")&&l(!c)}))}),[l,c]);Object(r.useEffect)((function(){var e=document.getElementById("breadcrumbs");e&&e.firstChild.classList.remove("active");var t=d.current;if(c&&t&&t.addEventListener("click",g),t)return function(){t.removeEventListener("click",g)}}),[a,c,g]);var b=Object(r.useCallback)((function(){p.current.value.trim()&&l(!0)}),[l]);return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsxs)(xe,{children:[Object(s.jsxs)(we,{ref:u,children:[Object(s.jsx)(h.b,{to:"/",children:"\u2737 \ud83c\udf80 \ud835\udcaf\ud835\udc52\ud835\udcc7\ud835\udcc2\ud835\udcc8 \ud835\udc35\ud835\udcb6\ud835\udcc3\ud835\udcc0 \ud83c\udf80 \u2737"}),Object(s.jsxs)("div",{children:[Object(s.jsx)("input",{type:"search",value:a,onChange:function(e){return i(e.target.value)},placeholder:"Search...",ref:p}),Object(s.jsx)("button",{onClick:b,children:"search"})]})]}),Object(s.jsx)(fe,{ref:u})]}),c?Object(s.jsx)(me,{spanRef:d,terms:a,isShowPopPage:c,setIsShowPopPage:l}):""]})},ye=Object(r.memo)(je),xe=g.a.div(le||(le=Object(u.a)(["\n  width: 100%;\n  height: 100px;\n  padding-top: 20px;\n  background-color: white;\n  box-shadow: 2px 0 10px #eee;\n  overflow: hidden;\n"]))),we=g.a.header(he||(he=Object(u.a)(["\n  width: 90%;\n  margin: 0 auto;\n  font-size: calc(1rem + 2vw);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  div {\n    display: flex;\n    input {\n      padding: 10px;\n      border: none;\n      border-bottom: 1px solid #ddd;\n      outline: none;\n      caret-color: #888;\n      font-family: roboto;\n    }\n    button {\n      border: none;\n      padding: 10px;\n      background-color: #eee;\n      color: #555;\n      cursor: pointer;\n      font-family: roboto;\n    }\n  }\n"]))),Oe=function(){return Object(s.jsx)("main",{children:Object(s.jsx)("section",{children:Object(s.jsx)(d.a,{})})})},ve=function(){return Object(s.jsxs)(p,{children:[Object(s.jsx)(ye,{}),Object(s.jsx)(Oe,{})]})},Te=Object(b.memo)((function(e){var t=e.title,a=e.path,r=e.text;return Object(s.jsxs)("article",{className:"term",children:[Object(s.jsx)("h3",{children:t}),Object(s.jsx)("p",{children:Object(s.jsx)(h.b,{to:a,children:r})})]})})),ke=[{id:Object(f.a)(),title:"Https",path:"/http",text:"The Hypertext Transfer Protocol (HTTP) is an application layer protocol in the Internet protocol suite model for distributed, collaborative, hypermedia information systems."},{id:Object(f.a)(),title:"React",path:"/react",text:"A JavaScript library for building user interfaces. React stands at the intersection of design and programming. It lets you take a complex user interface, and break it down into nestable and reusable pieces called \u201ccomponents\u201d that fit well together."},{id:Object(f.a)(),title:"React Router",path:"/react-router",text:"React Router is a collection of React components, hooks and utilities that make it easy to build multi-page applications with React. This reference contains the function signatures and return types of the various interfaces in React Router."},{id:Object(f.a)(),title:"Redux Toolkit",path:"/redux_toolkit",text:"Redux is a pattern and library for managing and updating application state, using events called 'actions'."},{id:Object(f.a)(),title:"TypeScript",path:"/typescript",text:"TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. "},{id:Object(f.a)(),title:"JavaScript",path:"/javascript",text:"JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions."},{id:Object(f.a)(),title:"Asynchronous JS",path:"/asynchronous_js",text:"The term asynchronous refers to two or more objects or events not existing or happening at the same time (or multiple related things happening without waiting for the previous one to complete)."},{id:Object(f.a)(),title:"CS",path:"/cs",text:"This page is about the common terms in computer science or computer programming languages."},{id:Object(f.a)(),title:"Git",path:"/git",text:"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency."},{id:Object(f.a)(),title:"Data Structure",path:"/data_structure",text:"Data Structures are the programmatic way of storing data so that data can be used efficiently."},{id:Object(f.a)(),title:"Algorithms",path:"/algorithms",text:"Algorithm is a step-by-step procedure, which defines a set of instructions to be executed in a certain order to get the desired output."},{id:Object(f.a)(),title:"Webpack",path:"/webpack",text:"Webpack is a static module bundler for modern JavaScript applications."},{id:Object(f.a)(),title:"Web Components",path:"/web_components",text:"Web Components is a suite of different technologies allowing you to create reusable custom elements \u2014 with their functionality encapsulated away from the rest of your code \u2014 and utilize them in your web apps."},{id:Object(f.a)(),title:"Web Terms",path:"/web_terms",text:"The World Wide Web (WWW), commonly known as the Web, is an information system where documents and other web resources are identified by Uniform Resource Locators (URLs, such as https://example.com/), which may be interlinked by hyperlinks, and are accessible over the Internet."},{id:Object(f.a)(),title:"WebGL",path:"/webgl",text:"WebGL (Web Graphics Library) is the new standard for 3D graphics on the Web, designed for rendering 2D graphics and interactive 3D graphics."},{id:Object(f.a)(),title:"Other Terms",path:"/other_terms",text:"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency."},{id:Object(f.a)(),title:"Note",path:"/note",text:"This page is about the notes that I have been thought and practiced in the programming"}],Le=function(){return Object(s.jsx)(s.Fragment,{children:Object(s.jsx)(_e,{children:Object(s.jsx)("section",{className:"term-section",children:ke.map((function(e){var t=e.id,a=e.title,r=e.path,i=e.text;return Object(s.jsx)(Te,{title:a,path:r,text:i},t)}))})})})},_e=g.a.div(de||(de=Object(u.a)(["\n  width: 100%;\n  .term-section {\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\n    grid-auto-rows: 100px;\n    gap: 0.4rem;\n    font-size: 0.875rem;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n  .term {\n    padding: 0 15px;\n    border: 1px solid white;\n    box-shadow: 1px 1px 5px #ddd;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .term h3 {\n    font-size: 18px;\n    color: #555;\n  }\n  .term p {\n    padding-top: 0.2rem;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n    overflow: hidden;\n    line-height: 1.1rem;\n    font-size: 14px;\n  }\n  .term a {\n    color: #333;\n  }\n"]))),Se=Object(r.memo)((function(e){var t=e.path,a=e.length,i=Object(r.useRef)(null),n=0;Object(r.useEffect)((function(){for(var e=i.current.childNodes,t=function(t){e[t].addEventListener("click",(function(){window.scroll(0,0),function(e,t){e[t].classList.add("active"),e[n].classList.remove("active"),n=t,e[t].classList&&e[t].classList.add("active")}(e,t)}))},a=0;a<e.length;a++)t(a)}));for(var o=a/15,c=[],l=[],d=0;d<Math.ceil(o);d++){l.push("p"+(d+1));var p=Object(s.jsx)(h.c,{to:"p1"===l[d]?"/".concat(t):"/".concat(t,"/").concat(l[d]),children:d+1},d);c.push(p)}return Object(s.jsx)(Ie,{children:Object(s.jsx)("section",{ref:i,id:"breadcrumbs",children:c})})})),Ie=g.a.footer(pe||(pe=Object(u.a)(['\n  section {\n    width: 90%;\n    height: 100px;\n    margin: 0 auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    a {\n      width: 40px;\n      height: 30px;\n      background: #eee;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border: none;\n      font-family: "Segoe UI";\n      &:hover {\n        cursor: pointer;\n      }\n    }\n    .active {\n      background-color: #333;\n      color: white;\n    }\n  }\n']))),Re=Se,Ae=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"http",length:v})]})},Ce=Object(r.memo)(Ae),Pe=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"react",length:_})]})},We=Object(r.memo)(Pe),qe=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"react-router",length:I})]})},Ue=Object(r.memo)(qe);function De(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"redux_toolkit",length:C})]})}var He=a(4),Ge=Object(b.memo)((function(e){var t=e.isLargerTitle,a=e.title,r=e.text,i=e.url,n=e.anchor;if(t)return""===i?Object(s.jsxs)("article",{className:"title",children:[Object(s.jsx)("h1",{id:n,children:a}),Object(s.jsx)("div",{children:r.p1})]}):Object(s.jsxs)("article",{className:"title",children:[Object(s.jsx)("h1",{id:n,children:Object(s.jsx)("a",{href:i,target:"blank",children:a})}),Object(s.jsx)("div",{children:r.p1})]});if(i)return Object(s.jsxs)("article",{className:"subtitle",children:[Object(s.jsx)("h3",{id:n,children:Object(s.jsx)("a",{href:i,target:"blank",children:a})}),Object(s.jsx)("div",{children:r.p1})]});if(r.p3){var o=r.p1,c=r.p2,l=r.p3;return Object(s.jsxs)("article",{className:"subtitle",children:[Object(s.jsx)("h3",{id:n,children:a}),Object(s.jsx)("div",{children:o}),Object(s.jsx)("div",{children:c}),Object(s.jsx)("div",{children:l})]})}return r.p2?Object(s.jsxs)("article",{className:"subtitle",children:[Object(s.jsx)("h3",{id:n,children:a}),Object(s.jsx)("div",{children:r.p1}),Object(s.jsx)("div",{children:r.p2})]}):Object(s.jsxs)("article",{className:"subtitle",children:[Object(s.jsx)("h3",{id:n,children:a}),Object(s.jsx)("div",{children:r.p1})]})})),Me=function(){return Object(s.jsx)(s.Fragment,{children:W.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)}))})},Ee=Object(r.memo)(Me),ze=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"javascript",length:G})]})},Je=Object(r.memo)(ze),Fe="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous",Ne=[{id:Object(f.a)(),title:"Asynchronous",isLargerTitle:!0,path:"/asynchronous_js",url:"https://developer.mozilla.org/en-US/docs/Glossary/Asynchronous",anchor:"Asynchronous_js",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"The term asynchronous refers to two or more objects or events not existing or happening at the same time (or multiple related things happening without waiting for the previous one to complete)."}),Object(s.jsx)("p",{children:"Normally, a given program's code runs straight along, with only one thing happening at once. If a function relies on the result of another function, it has to wait for the other function to finish and return, and until that happens, the entire program is essentially stopped from the perspective of the user."})]})}},{id:Object(f.a)(),title:"Synchronous",isLargerTitle:!1,path:"/asynchronous_js",url:"https://developer.mozilla.org/en-US/docs/Glossary/Synchronous",anchor:"Synchronous",text:{p1:Object(s.jsx)("p",{children:"Synchronous refers to real-time communication where each party receives (and if necessary, processes and replies to) messages instantly (or as near to instantly as possible)."})}},{id:Object(f.a)(),title:"Blocking code",isLargerTitle:!1,path:"/asynchronous_js",url:"".concat(Fe,"/Concepts#blocking_code"),anchor:"Blocking_code",text:{p1:Object(s.jsx)("p",{children:"Asynchronous techniques are very useful, particularly in web programming. When a web app runs in a browser and it executes an intensive chunk of code without returning control to the browser, the browser can appear to be frozen. This is called blocking; the browser is blocked from continuing to handle user input and perform other tasks until the web app returns control of the processor."})}},{id:Object(f.a)(),title:"Threads",isLargerTitle:!1,path:"/asynchronous_js",url:"".concat(Fe,"/Concepts#Threads"),anchor:"Threads",text:{p1:Object(s.jsx)("p",{children:"A thread is basically a single process that a program can use to complete tasks. Each thread can only do a single task at once: Task A --\x3e Task B --\x3e Task C. Each task will be run sequentially; a task has to complete before the next one can be started."})}},{id:Object(f.a)(),title:"JavaScript is single-threaded",isLargerTitle:!1,path:"/asynchronous_js",url:"".concat(Fe,"/Concepts#javascript_is_single-threaded"),anchor:"javascript_is_single_threaed",text:{p1:Object(s.jsx)("p",{children:"JavaScript is traditionally single-threaded. Even with multiple cores, you could only get it to run tasks on a single thread, called the main thread."})}},{id:Object(f.a)(),title:"Asynchronous code",isLargerTitle:!1,path:"/asynchronous_js",url:"".concat(Fe,"/Concepts#asynchronous_code"),anchor:"Asynchronous_code",text:{p1:Object(s.jsx)("p",{children:"Features like Promises allow you to set an operation running (e.g. the fetching of an image from the server), and then wait until the result has returned before running another operation. Features like Promises allow you to set an operation running (e.g. the fetching of an image from the server), and then wait until the result has returned before running another operation"})}},{id:Object(f.a)(),title:"Async callbacks",isLargerTitle:!1,path:"/asynchronous_js",url:"".concat(Fe,"/Introducing#async_callbacks"),anchor:"Async_callbacks",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("p",{children:"Async callbacks are functions that are specified as arguments when calling a function which will start executing code in the background. When the background code finishes running, it calls the callback function to let you know the work is done, or to let you know that something of interest has happened. Using callbacks is slightly old-fashioned now, but you'll still see them in use in a number of older-but-still-commonly-used APIs."}),Object(s.jsx)("p",{children:"Callbacks are versatile \u2014 not only do they allow you to control the order in which functions are run and what data is passed between them, they also allow you to pass data to different functions depending on circumstance."})]})}},{id:Object(f.a)(),title:"The event queue",isLargerTitle:!1,path:"/asynchronous_js",url:"".concat(Fe,"/Introducing#the_event_queue"),anchor:"The_event_queue",text:{p1:Object(s.jsxs)("p",{children:["Async operations like promises are put into an"," ",Object(s.jsx)("strong",{children:"event queue"}),", which runs after the main thread has finished processing so that they do not block subsequent JavaScript code from running. The queued operations will complete as soon as possible then return their results to the JavaScript environment."]})}},{id:Object(f.a)(),title:"Promises",isLargerTitle:!1,path:"/asynchronous_js",url:"".concat(Fe,"/Promises"),anchor:"Promises",text:{p1:Object(s.jsxs)(s.Fragment,{children:[Object(s.jsxs)("p",{children:[Object(s.jsx)("strong",{children:"Promises"})," are a JavaScript feature that allow you to defer further actions until after a previous action has completed, or respond to its failure."]}),Object(s.jsxs)("p",{children:["Essentially, a Promise is an object that represents an intermediate state of an operation \u2014 in effect, a ",Object(s.jsx)("i",{children:"promise"})," that a result of some kind will be returned at some point in the future. There is no guarantee of exactly when the operation will complete and the result will be returned, but there is a guarantee that when the result is available, or the promise fails, the code you provide will be executed in order to do something else with a successful result, or to gracefully handle a failure case."]})]})}}],Be=Ne.length,Ve=function(){return Object(s.jsxs)(s.Fragment,{children:[Ne.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)})),Object(s.jsx)(Re,{path:"asynchronous_js",length:Be})]})},Xe=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"cs",length:z})]})},Ye=Object(r.memo)(Xe),Qe=function(){return Object(s.jsx)(s.Fragment,{children:F.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)}))})};function Ke(){return Object(s.jsx)(s.Fragment,{children:X.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)}))})}function Ze(){return Object(s.jsx)(s.Fragment,{children:Q.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)}))})}var $e=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"webpack",length:$})]})},et=Object(r.memo)($e),tt=function(){return Object(s.jsxs)(s.Fragment,{children:[ee.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)})),Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"web_components",length:te})]})},at=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"web_terms",length:ie})]})},rt=function(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)(d.a,{}),Object(s.jsx)(Re,{path:"webgl",length:se})]})},it=function(){return Object(s.jsx)(s.Fragment,{children:B.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)}))})},nt=function(){return Object(s.jsx)(s.Fragment,{children:J.map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)}))})},ot=function(){return Object(s.jsx)(s.Fragment,{children:Object(s.jsx)("h1",{children:"Sorry, Still Working On The Way..."})})},st=Object(r.memo)(ot),ct=function(e,t,a){return Object(s.jsx)(s.Fragment,{children:e.slice(t,a).map((function(e){return Object(s.jsx)(Ge,Object(He.a)({},e),e.id)}))})},lt=Object(b.memo)((function(e){var t=e.content;return ct(t,0,15)})),ht=Object(b.memo)((function(e){var t=e.content,a=Object(d.h)().pId,r=Number(a.slice(1))-1;return r?ct(t,15*r,15*r+15):Object(s.jsx)("h1",{children:"sorry"})})),dt=function(){return Object(s.jsx)(h.a,{children:Object(s.jsx)(d.d,{children:Object(s.jsxs)(d.b,{path:"/",element:Object(s.jsx)(ve,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(Le,{})}),Object(s.jsxs)(d.b,{path:"http",element:Object(s.jsx)(Ce,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:O})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:O})})]}),Object(s.jsxs)(d.b,{path:"react-router",element:Object(s.jsx)(Ue,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:S})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:S})})]}),Object(s.jsxs)(d.b,{path:"react",element:Object(s.jsx)(We,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:L})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:L})})]}),Object(s.jsx)(d.b,{path:"redux_toolkit",element:Object(s.jsx)(De,{}),children:Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:A})})}),Object(s.jsx)(d.b,{path:"typescript",element:Object(s.jsx)(Ee,{})}),Object(s.jsxs)(d.b,{path:"javascript",element:Object(s.jsx)(Je,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:H})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:H})})]}),Object(s.jsx)(d.b,{path:"asynchronous_js",element:Object(s.jsx)(Ve,{})}),Object(s.jsxs)(d.b,{path:"cs",element:Object(s.jsx)(Ye,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:E})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:E})})]}),Object(s.jsx)(d.b,{path:"git",element:Object(s.jsx)(Qe,{})}),Object(s.jsx)(d.b,{path:"data_structure",element:Object(s.jsx)(Ke,{})}),Object(s.jsx)(d.b,{path:"algorithms",element:Object(s.jsx)(Ze,{})}),Object(s.jsxs)(d.b,{path:"webpack",element:Object(s.jsx)(et,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:Z})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:Z})})]}),Object(s.jsx)(d.b,{path:"web_components",element:Object(s.jsx)(tt,{})}),Object(s.jsxs)(d.b,{path:"web_terms",element:Object(s.jsx)(at,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:re})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:re})})]}),Object(s.jsxs)(d.b,{path:"webgl",element:Object(s.jsx)(rt,{}),children:[Object(s.jsx)(d.b,{index:!0,element:Object(s.jsx)(lt,{content:oe})}),Object(s.jsx)(d.b,{path:":pId",element:Object(s.jsx)(ht,{content:oe})})]}),Object(s.jsx)(d.b,{path:"other_terms",element:Object(s.jsx)(it,{})}),Object(s.jsx)(d.b,{path:"note",element:Object(s.jsx)(nt,{})}),Object(s.jsx)(d.b,{path:"*",element:Object(s.jsx)(st,{})})]})})})},pt=Object(r.memo)(dt);a(28);o.a.render(Object(s.jsx)(i.a.StrictMode,{children:Object(s.jsx)(l,{children:Object(s.jsx)(pt,{})})}),document.getElementById("root"))}},[[29,1,2]]]);
//# sourceMappingURL=main.c760dd5e.chunk.js.map